//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.LSS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.SchedulingTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ILSS", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeBlock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class LabSchedulingProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback RetrieveAvailableTimePeriodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RedeemReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveReservationOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback AddUSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyUSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveExperimentInfoOperationCompleted;
        
        /// <remarks/>
        public LabSchedulingProxy() {
            this.Url = "http://localhost/ilab_WSDL/I_LSS.asmx";
        }
        
        /// <remarks/>
        public event RetrieveAvailableTimePeriodsCompletedEventHandler RetrieveAvailableTimePeriodsCompleted;
        
        /// <remarks/>
        public event ConfirmReservationCompletedEventHandler ConfirmReservationCompleted;
        
        /// <remarks/>
        public event RedeemReservationCompletedEventHandler RedeemReservationCompleted;
        
        /// <remarks/>
        public event RemoveReservationCompletedEventHandler RemoveReservationCompleted;
        
        /// <remarks/>
        public event AddUSSInfoCompletedEventHandler AddUSSInfoCompleted;
        
        /// <remarks/>
        public event ModifyUSSInfoCompletedEventHandler ModifyUSSInfoCompleted;
        
        /// <remarks/>
        public event RemoveUSSInfoCompletedEventHandler RemoveUSSInfoCompleted;
        
        /// <remarks/>
        public event AddCredentialSetCompletedEventHandler AddCredentialSetCompleted;
        
        /// <remarks/>
        public event ModifyCredentialSetCompletedEventHandler ModifyCredentialSetCompleted;
        
        /// <remarks/>
        public event RemoveCredentialSetCompletedEventHandler RemoveCredentialSetCompleted;
        
        /// <remarks/>
        public event AddExperimentInfoCompletedEventHandler AddExperimentInfoCompleted;
        
        /// <remarks/>
        public event ModifyExperimentInfoCompletedEventHandler ModifyExperimentInfoCompleted;
        
        /// <remarks/>
        public event RemoveExperimentInfoCompletedEventHandler RemoveExperimentInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveAvailableTimePeriods", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimePeriod[] RetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime});
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public TimePeriod[] EndRetrieveAvailableTimePeriods(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RetrieveAvailableTimePeriodsAsync(serviceBrokerGuid, groupName, ussGuid, labServerGuid, clientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RetrieveAvailableTimePeriodsOperationCompleted == null)) {
                this.RetrieveAvailableTimePeriodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAvailableTimePeriodsOperationCompleted);
            }
            this.InvokeAsync("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, this.RetrieveAvailableTimePeriodsOperationCompleted, userState);
        }
        
        private void OnRetrieveAvailableTimePeriodsOperationCompleted(object arg) {
            if ((this.RetrieveAvailableTimePeriodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAvailableTimePeriodsCompleted(this, new RetrieveAvailableTimePeriodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ConfirmReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConfirmReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndConfirmReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.ConfirmReservationAsync(serviceBrokerGuid, groupName, ussGuid, labServerGuid, clientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void ConfirmReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.ConfirmReservationOperationCompleted == null)) {
                this.ConfirmReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmReservationOperationCompleted);
            }
            this.InvokeAsync("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, this.ConfirmReservationOperationCompleted, userState);
        }
        
        private void OnConfirmReservationOperationCompleted(object arg) {
            if ((this.ConfirmReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmReservationCompleted(this, new ConfirmReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RedeemReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RedeemReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRedeemReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRedeemReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RedeemReservationAsync(serviceBrokerGuid, groupName, ussGuid, labServerGuid, clientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RedeemReservationOperationCompleted == null)) {
                this.RedeemReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRedeemReservationOperationCompleted);
            }
            this.InvokeAsync("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, this.RedeemReservationOperationCompleted, userState);
        }
        
        private void OnRedeemReservationOperationCompleted(object arg) {
            if ((this.RedeemReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RedeemReservationCompleted(this, new RedeemReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveReservation(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RemoveReservationAsync(serviceBrokerGuid, groupName, ussGuid, labServerGuid, clientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RemoveReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RemoveReservationOperationCompleted == null)) {
                this.RemoveReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveReservationOperationCompleted);
            }
            this.InvokeAsync("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, this.RemoveReservationOperationCompleted, userState);
        }
        
        private void OnRemoveReservationOperationCompleted(object arg) {
            if ((this.RemoveReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveReservationCompleted(this, new RemoveReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddUSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddUSSInfo(string ussGuid, string ussName, string ussUrl, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon) {
            object[] results = this.Invoke("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddUSSInfo(string ussGuid, string ussName, string ussUrl, Coupon coupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddUSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon) {
            this.AddUSSInfoAsync(ussGuid, ussName, ussUrl, coupon, null);
        }
        
        /// <remarks/>
        public void AddUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon, object userState) {
            if ((this.AddUSSInfoOperationCompleted == null)) {
                this.AddUSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUSSInfoOperationCompleted);
            }
            this.InvokeAsync("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, this.AddUSSInfoOperationCompleted, userState);
        }
        
        private void OnAddUSSInfoOperationCompleted(object arg) {
            if ((this.AddUSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUSSInfoCompleted(this, new AddUSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyUSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyUSSInfo(string ussGuid, string ussName, string ussUrl, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon) {
            object[] results = this.Invoke("ModifyUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyUSSInfo(string ussGuid, string ussName, string ussUrl, Coupon coupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyUSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon) {
            this.ModifyUSSInfoAsync(ussGuid, ussName, ussUrl, coupon, null);
        }
        
        /// <remarks/>
        public void ModifyUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon, object userState) {
            if ((this.ModifyUSSInfoOperationCompleted == null)) {
                this.ModifyUSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyUSSInfoOperationCompleted);
            }
            this.InvokeAsync("ModifyUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, this.ModifyUSSInfoOperationCompleted, userState);
        }
        
        private void OnModifyUSSInfoOperationCompleted(object arg) {
            if ((this.ModifyUSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyUSSInfoCompleted(this, new ModifyUSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveUSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveUSSInfo(string ussGuid) {
            object[] results = this.Invoke("RemoveUSSInfo", new object[] {
                        ussGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveUSSInfo(string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveUSSInfo", new object[] {
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveUSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUSSInfoAsync(string ussGuid) {
            this.RemoveUSSInfoAsync(ussGuid, null);
        }
        
        /// <remarks/>
        public void RemoveUSSInfoAsync(string ussGuid, object userState) {
            if ((this.RemoveUSSInfoOperationCompleted == null)) {
                this.RemoveUSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUSSInfoOperationCompleted);
            }
            this.InvokeAsync("RemoveUSSInfo", new object[] {
                        ussGuid}, this.RemoveUSSInfoOperationCompleted, userState);
        }
        
        private void OnRemoveUSSInfoOperationCompleted(object arg) {
            if ((this.RemoveUSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUSSInfoCompleted(this, new RemoveUSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            object[] results = this.Invoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            this.AddCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, ussGuid, null);
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, object userState) {
            if ((this.AddCredentialSetOperationCompleted == null)) {
                this.AddCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCredentialSetOperationCompleted);
            }
            this.InvokeAsync("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, this.AddCredentialSetOperationCompleted, userState);
        }
        
        private void OnAddCredentialSetOperationCompleted(object arg) {
            if ((this.AddCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCredentialSetCompleted(this, new AddCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            object[] results = this.Invoke("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            this.ModifyCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, ussGuid, null);
        }
        
        /// <remarks/>
        public void ModifyCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, object userState) {
            if ((this.ModifyCredentialSetOperationCompleted == null)) {
                this.ModifyCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCredentialSetOperationCompleted);
            }
            this.InvokeAsync("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, this.ModifyCredentialSetOperationCompleted, userState);
        }
        
        private void OnModifyCredentialSetOperationCompleted(object arg) {
            if ((this.ModifyCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCredentialSetCompleted(this, new ModifyCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveCredentialSet(string serviceBrokerGuid, string groupName, string ussGuid) {
            object[] results = this.Invoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCredentialSet(string serviceBrokerGuid, string groupName, string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string groupName, string ussGuid) {
            this.RemoveCredentialSetAsync(serviceBrokerGuid, groupName, ussGuid, null);
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string groupName, string ussGuid, object userState) {
            if ((this.RemoveCredentialSetOperationCompleted == null)) {
                this.RemoveCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCredentialSetOperationCompleted);
            }
            this.InvokeAsync("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid}, this.RemoveCredentialSetOperationCompleted, userState);
        }
        
        private void OnRemoveCredentialSetOperationCompleted(object arg) {
            if ((this.RemoveCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCredentialSetCompleted(this, new RemoveCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            object[] results = this.Invoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            this.AddExperimentInfoAsync(labServerGuid, labServerName, clientGuid, clientName, clientVersion, providerName, null);
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, object userState) {
            if ((this.AddExperimentInfoOperationCompleted == null)) {
                this.AddExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, this.AddExperimentInfoOperationCompleted, userState);
        }
        
        private void OnAddExperimentInfoOperationCompleted(object arg) {
            if ((this.AddExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExperimentInfoCompleted(this, new AddExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            object[] results = this.Invoke("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            this.ModifyExperimentInfoAsync(labServerGuid, labServerName, clientGuid, clientName, clientVersion, providerName, null);
        }
        
        /// <remarks/>
        public void ModifyExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, object userState) {
            if ((this.ModifyExperimentInfoOperationCompleted == null)) {
                this.ModifyExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, this.ModifyExperimentInfoOperationCompleted, userState);
        }
        
        private void OnModifyExperimentInfoOperationCompleted(object arg) {
            if ((this.ModifyExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyExperimentInfoCompleted(this, new ModifyExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveExperimentInfo(string labServerGuid, string clientGuid) {
            object[] results = this.Invoke("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        clientGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveExperimentInfo(string labServerGuid, string clientGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        clientGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveExperimentInfoAsync(string labServerGuid, string clientGuid) {
            this.RemoveExperimentInfoAsync(labServerGuid, clientGuid, null);
        }
        
        /// <remarks/>
        public void RemoveExperimentInfoAsync(string labServerGuid, string clientGuid, object userState) {
            if ((this.RemoveExperimentInfoOperationCompleted == null)) {
                this.RemoveExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        clientGuid}, this.RemoveExperimentInfoOperationCompleted, userState);
        }
        
        private void OnRemoveExperimentInfoOperationCompleted(object arg) {
            if ((this.RemoveExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveExperimentInfoCompleted(this, new RemoveExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
   
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAvailableTimePeriodsCompletedEventHandler(object sender, RetrieveAvailableTimePeriodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAvailableTimePeriodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAvailableTimePeriodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimePeriod[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimePeriod[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ConfirmReservationCompletedEventHandler(object sender, ConfirmReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RedeemReservationCompletedEventHandler(object sender, RedeemReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RedeemReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RedeemReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveReservationCompletedEventHandler(object sender, RemoveReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddUSSInfoCompletedEventHandler(object sender, AddUSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyUSSInfoCompletedEventHandler(object sender, ModifyUSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyUSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyUSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveUSSInfoCompletedEventHandler(object sender, RemoveUSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCredentialSetCompletedEventHandler(object sender, AddCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyCredentialSetCompletedEventHandler(object sender, ModifyCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCredentialSetCompletedEventHandler(object sender, RemoveCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddExperimentInfoCompletedEventHandler(object sender, AddExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyExperimentInfoCompletedEventHandler(object sender, ModifyExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveExperimentInfoCompletedEventHandler(object sender, RemoveExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}
