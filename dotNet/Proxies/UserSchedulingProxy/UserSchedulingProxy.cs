//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.USS {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;

    using iLabs.DataTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.SchedulingTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IUSS", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeBlock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class UserSchedulingProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback RetrieveAvailableTimePeriodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListReservationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RedeemReservationOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback AddCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyLSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveLSSInfoOperationCompleted;
        
        /// <remarks/>
        public UserSchedulingProxy() {
            this.Url = "http://localhost/IWSDL/I_USS.asmx";
        }
        
        /// <remarks/>
        public event RetrieveAvailableTimePeriodsCompletedEventHandler RetrieveAvailableTimePeriodsCompleted;
        
        /// <remarks/>
        public event ListReservationsCompletedEventHandler ListReservationsCompleted;
        
        /// <remarks/>
        public event AddReservationCompletedEventHandler AddReservationCompleted;
        
        /// <remarks/>
        public event RevokeReservationCompletedEventHandler RevokeReservationCompleted;
        
        /// <remarks/>
        public event RedeemReservationCompletedEventHandler RedeemReservationCompleted;
        
        /// <remarks/>
        public event AddCredentialSetCompletedEventHandler AddCredentialSetCompleted;
        
        /// <remarks/>
        public event ModifyCredentialSetCompletedEventHandler ModifyCredentialSetCompleted;
        
        /// <remarks/>
        public event RemoveCredentialSetCompletedEventHandler RemoveCredentialSetCompleted;
        
        /// <remarks/>
        public event AddExperimentInfoCompletedEventHandler AddExperimentInfoCompleted;
        
        /// <remarks/>
        public event ModifyExperimentInfoCompletedEventHandler ModifyExperimentInfoCompleted;
        
        /// <remarks/>
        public event RemoveExperimentInfoCompletedEventHandler RemoveExperimentInfoCompleted;
        
        /// <remarks/>
        public event AddLSSInfoCompletedEventHandler AddLSSInfoCompleted;
        
        /// <remarks/>
        public event ModifyLSSInfoCompletedEventHandler ModifyLSSInfoCompleted;
        
        /// <remarks/>
        public event RemoveLSSInfoCompletedEventHandler RemoveLSSInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveAvailableTimePeriods", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimePeriod[] RetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime});
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public TimePeriod[] EndRetrieveAvailableTimePeriods(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RetrieveAvailableTimePeriodsAsync(serviceBrokerGuid, groupName, labServerGuid, clientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string labServerGuid, string clientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RetrieveAvailableTimePeriodsOperationCompleted == null)) {
                this.RetrieveAvailableTimePeriodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAvailableTimePeriodsOperationCompleted);
            }
            this.InvokeAsync("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        clientGuid,
                        startTime,
                        endTime}, this.RetrieveAvailableTimePeriodsOperationCompleted, userState);
        }
        
        private void OnRetrieveAvailableTimePeriodsOperationCompleted(object arg) {
            if ((this.RetrieveAvailableTimePeriodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAvailableTimePeriodsCompleted(this, new RetrieveAvailableTimePeriodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ListReservations", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Reservation[] ListReservations(string serviceBrokerGuid, string userName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("ListReservations", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime});
            return ((Reservation[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListReservations(string serviceBrokerGuid, string userName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListReservations", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public Reservation[] EndListReservations(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Reservation[])(results[0]));
        }
        
        /// <remarks/>
        public void ListReservationsAsync(string serviceBrokerGuid, string userName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.ListReservationsAsync(serviceBrokerGuid, userName, labServerGuid, labClientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void ListReservationsAsync(string serviceBrokerGuid, string userName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.ListReservationsOperationCompleted == null)) {
                this.ListReservationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListReservationsOperationCompleted);
            }
            this.InvokeAsync("ListReservations", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime}, this.ListReservationsOperationCompleted, userState);
        }
        
        private void OnListReservationsOperationCompleted(object arg) {
            if ((this.ListReservationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListReservationsCompleted(this, new ListReservationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddReservation(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("AddReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddReservation(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddReservationAsync(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime) {
            this.AddReservationAsync(serviceBrokerGuid, userName, groupName, labServerGuid, labClientGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void AddReservationAsync(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.AddReservationOperationCompleted == null)) {
                this.AddReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReservationOperationCompleted);
            }
            this.InvokeAsync("AddReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime}, this.AddReservationOperationCompleted, userState);
        }
        
        private void OnAddReservationOperationCompleted(object arg) {
            if ((this.AddReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReservationCompleted(this, new AddReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RevokeReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RevokeReservation(string serviceBrokerGuid, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message) {
            object[] results = this.Invoke("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeReservation(string serviceBrokerGuid, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRevokeReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string serviceBrokerGuid, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message) {
            this.RevokeReservationAsync(serviceBrokerGuid, groupName, labServerGuid, labClientGuid, startTime, endTime, message, null);
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string serviceBrokerGuid, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message, object userState) {
            if ((this.RevokeReservationOperationCompleted == null)) {
                this.RevokeReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeReservationOperationCompleted);
            }
            this.InvokeAsync("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message}, this.RevokeReservationOperationCompleted, userState);
        }
        
        private void OnRevokeReservationOperationCompleted(object arg) {
            if ((this.RevokeReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeReservationCompleted(this, new RevokeReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RedeemReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type")]
        public Reservation RedeemReservation(string serviceBrokerGuid, string userName, string labServerGuid, string clientGuid) {
            object[] results = this.Invoke("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        clientGuid});
            return ((Reservation)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRedeemReservation(string serviceBrokerGuid, string userName, string labServerGuid, string clientGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        clientGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Reservation EndRedeemReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Reservation)(results[0]));
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string serviceBrokerGuid, string userName, string labServerGuid, string clientGuid) {
            this.RedeemReservationAsync(serviceBrokerGuid, userName, labServerGuid, clientGuid, null);
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string serviceBrokerGuid, string userName, string labServerGuid, string clientGuid, object userState) {
            if ((this.RedeemReservationOperationCompleted == null)) {
                this.RedeemReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRedeemReservationOperationCompleted);
            }
            this.InvokeAsync("RedeemReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        labServerGuid,
                        clientGuid}, this.RedeemReservationOperationCompleted, userState);
        }
        
        private void OnRedeemReservationOperationCompleted(object arg) {
            if ((this.RedeemReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RedeemReservationCompleted(this, new RedeemReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            object[] results = this.Invoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            this.AddCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, null);
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, object userState) {
            if ((this.AddCredentialSetOperationCompleted == null)) {
                this.AddCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCredentialSetOperationCompleted);
            }
            this.InvokeAsync("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, this.AddCredentialSetOperationCompleted, userState);
        }
        
        private void OnAddCredentialSetOperationCompleted(object arg) {
            if ((this.AddCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCredentialSetCompleted(this, new AddCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            object[] results = this.Invoke("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            this.ModifyCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, null);
        }
        
        /// <remarks/>
        public void ModifyCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, object userState) {
            if ((this.ModifyCredentialSetOperationCompleted == null)) {
                this.ModifyCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCredentialSetOperationCompleted);
            }
            this.InvokeAsync("ModifyCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, this.ModifyCredentialSetOperationCompleted, userState);
        }
        
        private void OnModifyCredentialSetOperationCompleted(object arg) {
            if ((this.ModifyCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCredentialSetCompleted(this, new ModifyCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveCredentialSet(string serviceBrokerGuid, string groupName) {
            object[] results = this.Invoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCredentialSet(string serviceBrokerGuid, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string groupName) {
            this.RemoveCredentialSetAsync(serviceBrokerGuid, groupName, null);
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string groupName, object userState) {
            if ((this.RemoveCredentialSetOperationCompleted == null)) {
                this.RemoveCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCredentialSetOperationCompleted);
            }
            this.InvokeAsync("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        groupName}, this.RemoveCredentialSetOperationCompleted, userState);
        }
        
        private void OnRemoveCredentialSetOperationCompleted(object arg) {
            if ((this.RemoveCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCredentialSetCompleted(this, new RemoveCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            object[] results = this.Invoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            this.AddExperimentInfoAsync(labServerGuid, labServerName, labClientGuid, labClientName, labClientVersion, providerName, lssGuid, null);
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, object userState) {
            if ((this.AddExperimentInfoOperationCompleted == null)) {
                this.AddExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, this.AddExperimentInfoOperationCompleted, userState);
        }
        
        private void OnAddExperimentInfoOperationCompleted(object arg) {
            if ((this.AddExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExperimentInfoCompleted(this, new AddExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            object[] results = this.Invoke("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            this.ModifyExperimentInfoAsync(labServerGuid, labServerName, labClientGuid, labClientName, labClientVersion, providerName, lssGuid, null);
        }
        
        /// <remarks/>
        public void ModifyExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, object userState) {
            if ((this.ModifyExperimentInfoOperationCompleted == null)) {
                this.ModifyExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("ModifyExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, this.ModifyExperimentInfoOperationCompleted, userState);
        }
        
        private void OnModifyExperimentInfoOperationCompleted(object arg) {
            if ((this.ModifyExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyExperimentInfoCompleted(this, new ModifyExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveExperimentInfo(string labServerGuid, string labClientGuid, string lssGuid) {
            object[] results = this.Invoke("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        labClientGuid,
                        lssGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveExperimentInfo(string labServerGuid, string labClientGuid, string lssGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        labClientGuid,
                        lssGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveExperimentInfoAsync(string labServerGuid, string labClientGuid, string lssGuid) {
            this.RemoveExperimentInfoAsync(labServerGuid, labClientGuid, lssGuid, null);
        }
        
        /// <remarks/>
        public void RemoveExperimentInfoAsync(string labServerGuid, string labClientGuid, string lssGuid, object userState) {
            if ((this.RemoveExperimentInfoOperationCompleted == null)) {
                this.RemoveExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("RemoveExperimentInfo", new object[] {
                        labServerGuid,
                        labClientGuid,
                        lssGuid}, this.RemoveExperimentInfoOperationCompleted, userState);
        }
        
        private void OnRemoveExperimentInfoOperationCompleted(object arg) {
            if ((this.RemoveExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveExperimentInfoCompleted(this, new RemoveExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddLSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLSSInfo(string lssGuid, string lssName, string lssUrl, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon) {
            object[] results = this.Invoke("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLSSInfo(string lssGuid, string lssName, string lssUrl, Coupon coupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddLSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddLSSInfoAsync(string lssGuid, string lssName, string lssUrl, Coupon coupon) {
            this.AddLSSInfoAsync(lssGuid, lssName, lssUrl, coupon, null);
        }
        
        /// <remarks/>
        public void AddLSSInfoAsync(string lssGuid, string lssName, string lssUrl, Coupon coupon, object userState) {
            if ((this.AddLSSInfoOperationCompleted == null)) {
                this.AddLSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLSSInfoOperationCompleted);
            }
            this.InvokeAsync("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon}, this.AddLSSInfoOperationCompleted, userState);
        }
        
        private void OnAddLSSInfoOperationCompleted(object arg) {
            if ((this.AddLSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLSSInfoCompleted(this, new AddLSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyLSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyLSSInfo(string lssGuid, string lssName, string lssUrl, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon) {
            object[] results = this.Invoke("ModifyLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyLSSInfo(string lssGuid, string lssName, string lssUrl, Coupon coupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyLSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyLSSInfoAsync(string lssGuid, string lssName, string lssUrl, Coupon coupon) {
            this.ModifyLSSInfoAsync(lssGuid, lssName, lssUrl, coupon, null);
        }
        
        /// <remarks/>
        public void ModifyLSSInfoAsync(string lssGuid, string lssName, string lssUrl, Coupon coupon, object userState) {
            if ((this.ModifyLSSInfoOperationCompleted == null)) {
                this.ModifyLSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyLSSInfoOperationCompleted);
            }
            this.InvokeAsync("ModifyLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl,
                        coupon}, this.ModifyLSSInfoOperationCompleted, userState);
        }
        
        private void OnModifyLSSInfoOperationCompleted(object arg) {
            if ((this.ModifyLSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyLSSInfoCompleted(this, new ModifyLSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveLSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveLSSInfo(string lssGuid) {
            object[] results = this.Invoke("RemoveLSSInfo", new object[] {
                        lssGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveLSSInfo(string lssGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveLSSInfo", new object[] {
                        lssGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveLSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveLSSInfoAsync(string lssGuid) {
            this.RemoveLSSInfoAsync(lssGuid, null);
        }
        
        /// <remarks/>
        public void RemoveLSSInfoAsync(string lssGuid, object userState) {
            if ((this.RemoveLSSInfoOperationCompleted == null)) {
                this.RemoveLSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveLSSInfoOperationCompleted);
            }
            this.InvokeAsync("RemoveLSSInfo", new object[] {
                        lssGuid}, this.RemoveLSSInfoOperationCompleted, userState);
        }
        
        private void OnRemoveLSSInfoOperationCompleted(object arg) {
            if ((this.RemoveLSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveLSSInfoCompleted(this, new RemoveLSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
   
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAvailableTimePeriodsCompletedEventHandler(object sender, RetrieveAvailableTimePeriodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAvailableTimePeriodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAvailableTimePeriodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimePeriod[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimePeriod[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListReservationsCompletedEventHandler(object sender, ListReservationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListReservationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListReservationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Reservation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Reservation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddReservationCompletedEventHandler(object sender, AddReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeReservationCompletedEventHandler(object sender, RevokeReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokeReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevokeReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RedeemReservationCompletedEventHandler(object sender, RedeemReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RedeemReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RedeemReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Reservation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Reservation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCredentialSetCompletedEventHandler(object sender, AddCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyCredentialSetCompletedEventHandler(object sender, ModifyCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCredentialSetCompletedEventHandler(object sender, RemoveCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddExperimentInfoCompletedEventHandler(object sender, AddExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyExperimentInfoCompletedEventHandler(object sender, ModifyExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveExperimentInfoCompletedEventHandler(object sender, RemoveExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddLSSInfoCompletedEventHandler(object sender, AddLSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyLSSInfoCompletedEventHandler(object sender, ModifyLSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyLSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyLSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveLSSInfoCompletedEventHandler(object sender, RemoveLSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveLSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveLSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}
