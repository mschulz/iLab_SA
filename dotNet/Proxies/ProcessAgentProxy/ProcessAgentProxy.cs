//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.PAgent {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IProcessAgent", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class ProcessAgentProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServiceTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback StatusNotificationOperationCompleted;
        
        public InitAuthHeader InitAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback InstallDomainCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyDomainCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDomainCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyProcessAgentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetireProcessAgentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        /// <remarks/>
        public ProcessAgentProxy() {
            this.Url = "http://localhost/ilab_WSDL/I_ProcessAgent.asmx";
        }
        
        /// <remarks/>
        public event GetServiceTimeCompletedEventHandler GetServiceTimeCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event StatusNotificationCompletedEventHandler StatusNotificationCompleted;
        
        /// <remarks/>
        public event InstallDomainCredentialsCompletedEventHandler InstallDomainCredentialsCompleted;
        
        /// <remarks/>
        public event ModifyDomainCredentialsCompletedEventHandler ModifyDomainCredentialsCompleted;
        
        /// <remarks/>
        public event RemoveDomainCredentialsCompletedEventHandler RemoveDomainCredentialsCompleted;
        
        /// <remarks/>
        public event ModifyProcessAgentCompletedEventHandler ModifyProcessAgentCompleted;
        
        /// <remarks/>
        public event RetireProcessAgentCompletedEventHandler RetireProcessAgentCompleted;
        
        /// <remarks/>
        public event CancelTicketCompletedEventHandler CancelTicketCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetServiceTime", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServiceTime() {
            object[] results = this.Invoke("GetServiceTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceTime(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceTime", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetServiceTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceTimeAsync() {
            this.GetServiceTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceTimeAsync(object userState) {
            if ((this.GetServiceTimeOperationCompleted == null)) {
                this.GetServiceTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceTimeOperationCompleted);
            }
            this.InvokeAsync("GetServiceTime", new object[0], this.GetServiceTimeOperationCompleted, userState);
        }
        
        private void OnGetServiceTimeOperationCompleted(object arg) {
            if ((this.GetServiceTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceTimeCompleted(this, new GetServiceTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetStatus", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public StatusReport GetStatus() {
            object[] results = this.Invoke("GetStatus", new object[0]);
            return ((StatusReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStatus(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStatus", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public StatusReport EndGetStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StatusReport)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync() {
            this.GetStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[0], this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/StatusNotification", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StatusNotification([System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] StatusNotificationReport report) {
            this.Invoke("StatusNotification", new object[] {
                        report});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStatusNotification(StatusNotificationReport report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StatusNotification", new object[] {
                        report}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndStatusNotification(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void StatusNotificationAsync(StatusNotificationReport report) {
            this.StatusNotificationAsync(report, null);
        }
        
        /// <remarks/>
        public void StatusNotificationAsync(StatusNotificationReport report, object userState) {
            if ((this.StatusNotificationOperationCompleted == null)) {
                this.StatusNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStatusNotificationOperationCompleted);
            }
            this.InvokeAsync("StatusNotification", new object[] {
                        report}, this.StatusNotificationOperationCompleted, userState);
        }
        
        private void OnStatusNotificationOperationCompleted(object arg) {
            if ((this.StatusNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StatusNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("InitAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/InstallDomainCredentials", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public ProcessAgent InstallDomainCredentials([System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] ProcessAgent service, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon inIdentCoupon, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon outIdentCoupon) {
            object[] results = this.Invoke("InstallDomainCredentials", new object[] {
                        service,
                        inIdentCoupon,
                        outIdentCoupon});
            return ((ProcessAgent)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallDomainCredentials(ProcessAgent service, Coupon inIdentCoupon, Coupon outIdentCoupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallDomainCredentials", new object[] {
                        service,
                        inIdentCoupon,
                        outIdentCoupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProcessAgent EndInstallDomainCredentials(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessAgent)(results[0]));
        }
        
        /// <remarks/>
        public void InstallDomainCredentialsAsync(ProcessAgent service, Coupon inIdentCoupon, Coupon outIdentCoupon) {
            this.InstallDomainCredentialsAsync(service, inIdentCoupon, outIdentCoupon, null);
        }
        
        /// <remarks/>
        public void InstallDomainCredentialsAsync(ProcessAgent service, Coupon inIdentCoupon, Coupon outIdentCoupon, object userState) {
            if ((this.InstallDomainCredentialsOperationCompleted == null)) {
                this.InstallDomainCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallDomainCredentialsOperationCompleted);
            }
            this.InvokeAsync("InstallDomainCredentials", new object[] {
                        service,
                        inIdentCoupon,
                        outIdentCoupon}, this.InstallDomainCredentialsOperationCompleted, userState);
        }
        
        private void OnInstallDomainCredentialsOperationCompleted(object arg) {
            if ((this.InstallDomainCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallDomainCredentialsCompleted(this, new InstallDomainCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyDomainCredentials", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyDomainCredentials(string originalGuid, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] ProcessAgent agent, string extra, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon inCoupon, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon outCoupon) {
            object[] results = this.Invoke("ModifyDomainCredentials", new object[] {
                        originalGuid,
                        agent,
                        extra,
                        inCoupon,
                        outCoupon});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyDomainCredentials(string originalGuid, ProcessAgent agent, string extra, Coupon inCoupon, Coupon outCoupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyDomainCredentials", new object[] {
                        originalGuid,
                        agent,
                        extra,
                        inCoupon,
                        outCoupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyDomainCredentials(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyDomainCredentialsAsync(string originalGuid, ProcessAgent agent, string extra, Coupon inCoupon, Coupon outCoupon) {
            this.ModifyDomainCredentialsAsync(originalGuid, agent, extra, inCoupon, outCoupon, null);
        }
        
        /// <remarks/>
        public void ModifyDomainCredentialsAsync(string originalGuid, ProcessAgent agent, string extra, Coupon inCoupon, Coupon outCoupon, object userState) {
            if ((this.ModifyDomainCredentialsOperationCompleted == null)) {
                this.ModifyDomainCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyDomainCredentialsOperationCompleted);
            }
            this.InvokeAsync("ModifyDomainCredentials", new object[] {
                        originalGuid,
                        agent,
                        extra,
                        inCoupon,
                        outCoupon}, this.ModifyDomainCredentialsOperationCompleted, userState);
        }
        
        private void OnModifyDomainCredentialsOperationCompleted(object arg) {
            if ((this.ModifyDomainCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyDomainCredentialsCompleted(this, new ModifyDomainCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveDomainCredentials", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveDomainCredentials(string domainGuid, string serviceGuid) {
            object[] results = this.Invoke("RemoveDomainCredentials", new object[] {
                        domainGuid,
                        serviceGuid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveDomainCredentials(string domainGuid, string serviceGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveDomainCredentials", new object[] {
                        domainGuid,
                        serviceGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRemoveDomainCredentials(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveDomainCredentialsAsync(string domainGuid, string serviceGuid) {
            this.RemoveDomainCredentialsAsync(domainGuid, serviceGuid, null);
        }
        
        /// <remarks/>
        public void RemoveDomainCredentialsAsync(string domainGuid, string serviceGuid, object userState) {
            if ((this.RemoveDomainCredentialsOperationCompleted == null)) {
                this.RemoveDomainCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDomainCredentialsOperationCompleted);
            }
            this.InvokeAsync("RemoveDomainCredentials", new object[] {
                        domainGuid,
                        serviceGuid}, this.RemoveDomainCredentialsOperationCompleted, userState);
        }
        
        private void OnRemoveDomainCredentialsOperationCompleted(object arg) {
            if ((this.RemoveDomainCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDomainCredentialsCompleted(this, new RemoveDomainCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyProcessAgent", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ModifyProcessAgent(string originalGuid, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] ProcessAgent agent, string extra) {
            object[] results = this.Invoke("ModifyProcessAgent", new object[] {
                        originalGuid,
                        agent,
                        extra});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyProcessAgent(string originalGuid, ProcessAgent agent, string extra, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyProcessAgent", new object[] {
                        originalGuid,
                        agent,
                        extra}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndModifyProcessAgent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyProcessAgentAsync(string originalGuid, ProcessAgent agent, string extra) {
            this.ModifyProcessAgentAsync(originalGuid, agent, extra, null);
        }
        
        /// <remarks/>
        public void ModifyProcessAgentAsync(string originalGuid, ProcessAgent agent, string extra, object userState) {
            if ((this.ModifyProcessAgentOperationCompleted == null)) {
                this.ModifyProcessAgentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProcessAgentOperationCompleted);
            }
            this.InvokeAsync("ModifyProcessAgent", new object[] {
                        originalGuid,
                        agent,
                        extra}, this.ModifyProcessAgentOperationCompleted, userState);
        }
        
        private void OnModifyProcessAgentOperationCompleted(object arg) {
            if ((this.ModifyProcessAgentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProcessAgentCompleted(this, new ModifyProcessAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetireProcessAgent", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetireProcessAgent(string domainGuid, string serviceGuid, bool state) {
            object[] results = this.Invoke("RetireProcessAgent", new object[] {
                        domainGuid,
                        serviceGuid,
                        state});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetireProcessAgent(string domainGuid, string serviceGuid, bool state, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetireProcessAgent", new object[] {
                        domainGuid,
                        serviceGuid,
                        state}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRetireProcessAgent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RetireProcessAgentAsync(string domainGuid, string serviceGuid, bool state) {
            this.RetireProcessAgentAsync(domainGuid, serviceGuid, state, null);
        }
        
        /// <remarks/>
        public void RetireProcessAgentAsync(string domainGuid, string serviceGuid, bool state, object userState) {
            if ((this.RetireProcessAgentOperationCompleted == null)) {
                this.RetireProcessAgentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetireProcessAgentOperationCompleted);
            }
            this.InvokeAsync("RetireProcessAgent", new object[] {
                        domainGuid,
                        serviceGuid,
                        state}, this.RetireProcessAgentOperationCompleted, userState);
        }
        
        private void OnRetireProcessAgentOperationCompleted(object arg) {
            if ((this.RetireProcessAgentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetireProcessAgentCompleted(this, new RetireProcessAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/CancelTicket", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelTicket([System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon, string type, string redeemer) {
            object[] results = this.Invoke("CancelTicket", new object[] {
                        coupon,
                        type,
                        redeemer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelTicket(Coupon coupon, string type, string redeemer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelTicket", new object[] {
                        coupon,
                        type,
                        redeemer}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancelTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelTicketAsync(Coupon coupon, string type, string redeemer) {
            this.CancelTicketAsync(coupon, type, redeemer, null);
        }
        
        /// <remarks/>
        public void CancelTicketAsync(Coupon coupon, string type, string redeemer, object userState) {
            if ((this.CancelTicketOperationCompleted == null)) {
                this.CancelTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTicketOperationCompleted);
            }
            this.InvokeAsync("CancelTicket", new object[] {
                        coupon,
                        type,
                        redeemer}, this.CancelTicketOperationCompleted, userState);
        }
        
        private void OnCancelTicketOperationCompleted(object arg) {
            if ((this.CancelTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelTicketCompleted(this, new CancelTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/Register", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Register(string registerGuid, ServiceDescription[] info) {
            this.Invoke("Register", new object[] {
                        registerGuid,
                        info});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegister(string registerGuid, ServiceDescription[] info, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Register", new object[] {
                        registerGuid,
                        info}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRegister(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RegisterAsync(string registerGuid, ServiceDescription[] info) {
            this.RegisterAsync(registerGuid, info, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string registerGuid, ServiceDescription[] info, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        registerGuid,
                        info}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
 
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServiceTimeCompletedEventHandler(object sender, GetServiceTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StatusReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StatusReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void StatusNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallDomainCredentialsCompletedEventHandler(object sender, InstallDomainCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallDomainCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallDomainCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessAgent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessAgent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyDomainCredentialsCompletedEventHandler(object sender, ModifyDomainCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyDomainCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyDomainCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveDomainCredentialsCompletedEventHandler(object sender, RemoveDomainCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveDomainCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveDomainCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyProcessAgentCompletedEventHandler(object sender, ModifyProcessAgentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProcessAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyProcessAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetireProcessAgentCompletedEventHandler(object sender, RetireProcessAgentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetireProcessAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetireProcessAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelTicketCompletedEventHandler(object sender, CancelTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
