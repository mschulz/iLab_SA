//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.BatchSB {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes.BatchTypes;
    using iLabs.ServiceBroker.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IBatchSB", Namespace="http://ilab.mit.edu")]
    public partial class BatchSBProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public sbAuthHeader sbAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback GetLabStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEffectiveQueueLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveClientItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadClientItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListAllClientItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveSpecificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveLabConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentInformationOperationCompleted;
        
        /// <remarks/>
        public BatchSBProxy() {
            this.Url = "http://localhost/ilab_WSDL/I_BatchSB.asmx";
        }
        
        /// <remarks/>
        public event GetLabStatusCompletedEventHandler GetLabStatusCompleted;
        
        /// <remarks/>
        public event GetEffectiveQueueLengthCompletedEventHandler GetEffectiveQueueLengthCompleted;
        
        /// <remarks/>
        public event GetLabInfoCompletedEventHandler GetLabInfoCompleted;
        
        /// <remarks/>
        public event GetLabConfigurationCompletedEventHandler GetLabConfigurationCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        public event SubmitCompletedEventHandler SubmitCompleted;
        
        /// <remarks/>
        public event GetExperimentStatusCompletedEventHandler GetExperimentStatusCompleted;
        
        /// <remarks/>
        public event CancelCompletedEventHandler CancelCompleted;
        
        /// <remarks/>
        public event RetrieveResultCompletedEventHandler RetrieveResultCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        public event SaveClientItemCompletedEventHandler SaveClientItemCompleted;
        
        /// <remarks/>
        public event LoadClientItemCompletedEventHandler LoadClientItemCompleted;
        
        /// <remarks/>
        public event DeleteClientItemCompletedEventHandler DeleteClientItemCompleted;
        
        /// <remarks/>
        public event ListAllClientItemsCompletedEventHandler ListAllClientItemsCompleted;
        
        /// <remarks/>
        public event RetrieveSpecificationCompletedEventHandler RetrieveSpecificationCompleted;
        
        /// <remarks/>
        public event RetrieveLabConfigurationCompletedEventHandler RetrieveLabConfigurationCompleted;
        
        /// <remarks/>
        public event SaveAnnotationCompletedEventHandler SaveAnnotationCompleted;
        
        /// <remarks/>
        public event RetrieveAnnotationCompletedEventHandler RetrieveAnnotationCompleted;
        
        /// <remarks/>
        public event GetExperimentInformationCompletedEventHandler GetExperimentInformationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabStatus", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabStatus GetLabStatus(string labServerID) {
            object[] results = this.Invoke("GetLabStatus", new object[] {
                        labServerID});
            return ((LabStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabStatus(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabStatus", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LabStatus EndGetLabStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabStatusAsync(string labServerID) {
            this.GetLabStatusAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabStatusAsync(string labServerID, object userState) {
            if ((this.GetLabStatusOperationCompleted == null)) {
                this.GetLabStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabStatusOperationCompleted);
            }
            this.InvokeAsync("GetLabStatus", new object[] {
                        labServerID}, this.GetLabStatusOperationCompleted, userState);
        }
        
        private void OnGetLabStatusOperationCompleted(object arg) {
            if ((this.GetLabStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabStatusCompleted(this, new GetLabStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetEffectiveQueueLength", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WaitEstimate GetEffectiveQueueLength(string labServerID, int priorityHint) {
            object[] results = this.Invoke("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint});
            return ((WaitEstimate)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEffectiveQueueLength(string labServerID, int priorityHint, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint}, callback, asyncState);
        }
        
        /// <remarks/>
        public WaitEstimate EndGetEffectiveQueueLength(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WaitEstimate)(results[0]));
        }
        
        /// <remarks/>
        public void GetEffectiveQueueLengthAsync(string labServerID, int priorityHint) {
            this.GetEffectiveQueueLengthAsync(labServerID, priorityHint, null);
        }
        
        /// <remarks/>
        public void GetEffectiveQueueLengthAsync(string labServerID, int priorityHint, object userState) {
            if ((this.GetEffectiveQueueLengthOperationCompleted == null)) {
                this.GetEffectiveQueueLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEffectiveQueueLengthOperationCompleted);
            }
            this.InvokeAsync("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint}, this.GetEffectiveQueueLengthOperationCompleted, userState);
        }
        
        private void OnGetEffectiveQueueLengthOperationCompleted(object arg) {
            if ((this.GetEffectiveQueueLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEffectiveQueueLengthCompleted(this, new GetEffectiveQueueLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabInfo", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabInfo(string labServerID) {
            object[] results = this.Invoke("GetLabInfo", new object[] {
                        labServerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabInfo(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabInfo", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabInfoAsync(string labServerID) {
            this.GetLabInfoAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabInfoAsync(string labServerID, object userState) {
            if ((this.GetLabInfoOperationCompleted == null)) {
                this.GetLabInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabInfoOperationCompleted);
            }
            this.InvokeAsync("GetLabInfo", new object[] {
                        labServerID}, this.GetLabInfoOperationCompleted, userState);
        }
        
        private void OnGetLabInfoOperationCompleted(object arg) {
            if ((this.GetLabInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabInfoCompleted(this, new GetLabInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabConfiguration", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabConfiguration(string labServerID) {
            object[] results = this.Invoke("GetLabConfiguration", new object[] {
                        labServerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabConfiguration(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabConfiguration", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabConfiguration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabConfigurationAsync(string labServerID) {
            this.GetLabConfigurationAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabConfigurationAsync(string labServerID, object userState) {
            if ((this.GetLabConfigurationOperationCompleted == null)) {
                this.GetLabConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetLabConfiguration", new object[] {
                        labServerID}, this.GetLabConfigurationOperationCompleted, userState);
        }
        
        private void OnGetLabConfigurationOperationCompleted(object arg) {
            if ((this.GetLabConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabConfigurationCompleted(this, new GetLabConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Validate", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationReport Validate(string labServerID, string experimentSpecification) {
            object[] results = this.Invoke("Validate", new object[] {
                        labServerID,
                        experimentSpecification});
            return ((ValidationReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidate(string labServerID, string experimentSpecification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Validate", new object[] {
                        labServerID,
                        experimentSpecification}, callback, asyncState);
        }
        
        /// <remarks/>
        public ValidationReport EndValidate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ValidationReport)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAsync(string labServerID, string experimentSpecification) {
            this.ValidateAsync(labServerID, experimentSpecification, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(string labServerID, string experimentSpecification, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        labServerID,
                        experimentSpecification}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Submit", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientSubmissionReport Submit(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification) {
            object[] results = this.Invoke("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification});
            return ((ClientSubmissionReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubmit(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClientSubmissionReport EndSubmit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientSubmissionReport)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitAsync(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification) {
            this.SubmitAsync(labServerID, experimentSpecification, priorityHint, emailNotification, null);
        }
        
        /// <remarks/>
        public void SubmitAsync(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification, object userState) {
            if ((this.SubmitOperationCompleted == null)) {
                this.SubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOperationCompleted);
            }
            this.InvokeAsync("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification}, this.SubmitOperationCompleted, userState);
        }
        
        private void OnSubmitOperationCompleted(object arg) {
            if ((this.SubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitCompleted(this, new SubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetExperimentStatus", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabExperimentStatus GetExperimentStatus(int experimentID) {
            object[] results = this.Invoke("GetExperimentStatus", new object[] {
                        experimentID});
            return ((LabExperimentStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperimentStatus(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperimentStatus", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LabExperimentStatus EndGetExperimentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabExperimentStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(int experimentID) {
            this.GetExperimentStatusAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(int experimentID, object userState) {
            if ((this.GetExperimentStatusOperationCompleted == null)) {
                this.GetExperimentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentStatusOperationCompleted);
            }
            this.InvokeAsync("GetExperimentStatus", new object[] {
                        experimentID}, this.GetExperimentStatusOperationCompleted, userState);
        }
        
        private void OnGetExperimentStatusOperationCompleted(object arg) {
            if ((this.GetExperimentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentStatusCompleted(this, new GetExperimentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Cancel", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Cancel(int experimentID) {
            object[] results = this.Invoke("Cancel", new object[] {
                        experimentID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancel(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Cancel", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAsync(int experimentID) {
            this.CancelAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void CancelAsync(int experimentID, object userState) {
            if ((this.CancelOperationCompleted == null)) {
                this.CancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOperationCompleted);
            }
            this.InvokeAsync("Cancel", new object[] {
                        experimentID}, this.CancelOperationCompleted, userState);
        }
        
        private void OnCancelOperationCompleted(object arg) {
            if ((this.CancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCompleted(this, new CancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/RetrieveResult", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultReport RetrieveResult(int experimentID) {
            object[] results = this.Invoke("RetrieveResult", new object[] {
                        experimentID});
            return ((ResultReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveResult(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveResult", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultReport EndRetrieveResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultReport)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveResultAsync(int experimentID) {
            this.RetrieveResultAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveResultAsync(int experimentID, object userState) {
            if ((this.RetrieveResultOperationCompleted == null)) {
                this.RetrieveResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveResultOperationCompleted);
            }
            this.InvokeAsync("RetrieveResult", new object[] {
                        experimentID}, this.RetrieveResultOperationCompleted, userState);
        }
        
        private void OnRetrieveResultOperationCompleted(object arg) {
            if ((this.RetrieveResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveResultCompleted(this, new RetrieveResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Notify", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Notify(int experimentID) {
            this.Invoke("Notify", new object[] {
                        experimentID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNotify(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Notify", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndNotify(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void NotifyAsync(int experimentID) {
            this.NotifyAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(int experimentID, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        experimentID}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/SaveClientItem", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveClientItem(string name, string itemValue) {
            this.Invoke("SaveClientItem", new object[] {
                        name,
                        itemValue});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveClientItem(string name, string itemValue, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveClientItem", new object[] {
                        name,
                        itemValue}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveClientItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveClientItemAsync(string name, string itemValue) {
            this.SaveClientItemAsync(name, itemValue, null);
        }
        
        /// <remarks/>
        public void SaveClientItemAsync(string name, string itemValue, object userState) {
            if ((this.SaveClientItemOperationCompleted == null)) {
                this.SaveClientItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveClientItemOperationCompleted);
            }
            this.InvokeAsync("SaveClientItem", new object[] {
                        name,
                        itemValue}, this.SaveClientItemOperationCompleted, userState);
        }
        
        private void OnSaveClientItemOperationCompleted(object arg) {
            if ((this.SaveClientItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveClientItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/LoadClientItem", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadClientItem(string name) {
            object[] results = this.Invoke("LoadClientItem", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoadClientItem(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoadClientItem", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLoadClientItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadClientItemAsync(string name) {
            this.LoadClientItemAsync(name, null);
        }
        
        /// <remarks/>
        public void LoadClientItemAsync(string name, object userState) {
            if ((this.LoadClientItemOperationCompleted == null)) {
                this.LoadClientItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadClientItemOperationCompleted);
            }
            this.InvokeAsync("LoadClientItem", new object[] {
                        name}, this.LoadClientItemOperationCompleted, userState);
        }
        
        private void OnLoadClientItemOperationCompleted(object arg) {
            if ((this.LoadClientItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadClientItemCompleted(this, new LoadClientItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/DeleteClientItem", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClientItem(string name) {
            this.Invoke("DeleteClientItem", new object[] {
                        name});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteClientItem(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteClientItem", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteClientItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteClientItemAsync(string name) {
            this.DeleteClientItemAsync(name, null);
        }
        
        /// <remarks/>
        public void DeleteClientItemAsync(string name, object userState) {
            if ((this.DeleteClientItemOperationCompleted == null)) {
                this.DeleteClientItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientItemOperationCompleted);
            }
            this.InvokeAsync("DeleteClientItem", new object[] {
                        name}, this.DeleteClientItemOperationCompleted, userState);
        }
        
        private void OnDeleteClientItemOperationCompleted(object arg) {
            if ((this.DeleteClientItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/ListAllClientItems", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ListAllClientItems() {
            object[] results = this.Invoke("ListAllClientItems", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListAllClientItems(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListAllClientItems", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndListAllClientItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ListAllClientItemsAsync() {
            this.ListAllClientItemsAsync(null);
        }
        
        /// <remarks/>
        public void ListAllClientItemsAsync(object userState) {
            if ((this.ListAllClientItemsOperationCompleted == null)) {
                this.ListAllClientItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListAllClientItemsOperationCompleted);
            }
            this.InvokeAsync("ListAllClientItems", new object[0], this.ListAllClientItemsOperationCompleted, userState);
        }
        
        private void OnListAllClientItemsOperationCompleted(object arg) {
            if ((this.ListAllClientItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListAllClientItemsCompleted(this, new ListAllClientItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/RetrieveSpecification", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveSpecification(int experimentID) {
            object[] results = this.Invoke("RetrieveSpecification", new object[] {
                        experimentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveSpecification(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveSpecification", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRetrieveSpecification(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveSpecificationAsync(int experimentID) {
            this.RetrieveSpecificationAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveSpecificationAsync(int experimentID, object userState) {
            if ((this.RetrieveSpecificationOperationCompleted == null)) {
                this.RetrieveSpecificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveSpecificationOperationCompleted);
            }
            this.InvokeAsync("RetrieveSpecification", new object[] {
                        experimentID}, this.RetrieveSpecificationOperationCompleted, userState);
        }
        
        private void OnRetrieveSpecificationOperationCompleted(object arg) {
            if ((this.RetrieveSpecificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveSpecificationCompleted(this, new RetrieveSpecificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/RetrieveLabConfiguration", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveLabConfiguration(int experimentID) {
            object[] results = this.Invoke("RetrieveLabConfiguration", new object[] {
                        experimentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveLabConfiguration(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveLabConfiguration", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRetrieveLabConfiguration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveLabConfigurationAsync(int experimentID) {
            this.RetrieveLabConfigurationAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveLabConfigurationAsync(int experimentID, object userState) {
            if ((this.RetrieveLabConfigurationOperationCompleted == null)) {
                this.RetrieveLabConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveLabConfigurationOperationCompleted);
            }
            this.InvokeAsync("RetrieveLabConfiguration", new object[] {
                        experimentID}, this.RetrieveLabConfigurationOperationCompleted, userState);
        }
        
        private void OnRetrieveLabConfigurationOperationCompleted(object arg) {
            if ((this.RetrieveLabConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveLabConfigurationCompleted(this, new RetrieveLabConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/SaveAnnotation", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveAnnotation(int experimentID, string annotation) {
            object[] results = this.Invoke("SaveAnnotation", new object[] {
                        experimentID,
                        annotation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveAnnotation(int experimentID, string annotation, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveAnnotation", new object[] {
                        experimentID,
                        annotation}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSaveAnnotation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveAnnotationAsync(int experimentID, string annotation) {
            this.SaveAnnotationAsync(experimentID, annotation, null);
        }
        
        /// <remarks/>
        public void SaveAnnotationAsync(int experimentID, string annotation, object userState) {
            if ((this.SaveAnnotationOperationCompleted == null)) {
                this.SaveAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAnnotationOperationCompleted);
            }
            this.InvokeAsync("SaveAnnotation", new object[] {
                        experimentID,
                        annotation}, this.SaveAnnotationOperationCompleted, userState);
        }
        
        private void OnSaveAnnotationOperationCompleted(object arg) {
            if ((this.SaveAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAnnotationCompleted(this, new SaveAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/RetrieveAnnotation", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveAnnotation(int experimentID) {
            object[] results = this.Invoke("RetrieveAnnotation", new object[] {
                        experimentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAnnotation(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAnnotation", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRetrieveAnnotation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAnnotationAsync(int experimentID) {
            this.RetrieveAnnotationAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveAnnotationAsync(int experimentID, object userState) {
            if ((this.RetrieveAnnotationOperationCompleted == null)) {
                this.RetrieveAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAnnotationOperationCompleted);
            }
            this.InvokeAsync("RetrieveAnnotation", new object[] {
                        experimentID}, this.RetrieveAnnotationOperationCompleted, userState);
        }
        
        private void OnRetrieveAnnotationOperationCompleted(object arg) {
            if ((this.RetrieveAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAnnotationCompleted(this, new RetrieveAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetExperimentInformation", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExperimentInformation[] GetExperimentInformation(int[] experimentIDs) {
            object[] results = this.Invoke("GetExperimentInformation", new object[] {
                        experimentIDs});
            return ((ExperimentInformation[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperimentInformation(int[] experimentIDs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperimentInformation", new object[] {
                        experimentIDs}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExperimentInformation[] EndGetExperimentInformation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExperimentInformation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentInformationAsync(int[] experimentIDs) {
            this.GetExperimentInformationAsync(experimentIDs, null);
        }
        
        /// <remarks/>
        public void GetExperimentInformationAsync(int[] experimentIDs, object userState) {
            if ((this.GetExperimentInformationOperationCompleted == null)) {
                this.GetExperimentInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentInformationOperationCompleted);
            }
            this.InvokeAsync("GetExperimentInformation", new object[] {
                        experimentIDs}, this.GetExperimentInformationOperationCompleted, userState);
        }
        
        private void OnGetExperimentInformationOperationCompleted(object arg) {
            if ((this.GetExperimentInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentInformationCompleted(this, new GetExperimentInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void CancelAsync1(object userState) {
            base.CancelAsync(userState);
        }
    }
  
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLabStatusCompletedEventHandler(object sender, GetLabStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEffectiveQueueLengthCompletedEventHandler(object sender, GetEffectiveQueueLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEffectiveQueueLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEffectiveQueueLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WaitEstimate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WaitEstimate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLabInfoCompletedEventHandler(object sender, GetLabInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLabConfigurationCompletedEventHandler(object sender, GetLabConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ValidateCompletedEventHandler(object sender, ValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubmitCompletedEventHandler(object sender, SubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClientSubmissionReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClientSubmissionReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExperimentStatusCompletedEventHandler(object sender, GetExperimentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabExperimentStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabExperimentStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelCompletedEventHandler(object sender, CancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveResultCompletedEventHandler(object sender, RetrieveResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void NotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveClientItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LoadClientItemCompletedEventHandler(object sender, LoadClientItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadClientItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadClientItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteClientItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListAllClientItemsCompletedEventHandler(object sender, ListAllClientItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListAllClientItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListAllClientItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveSpecificationCompletedEventHandler(object sender, RetrieveSpecificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveSpecificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveSpecificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveLabConfigurationCompletedEventHandler(object sender, RetrieveLabConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveLabConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveLabConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveAnnotationCompletedEventHandler(object sender, SaveAnnotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveAnnotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveAnnotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAnnotationCompletedEventHandler(object sender, RetrieveAnnotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAnnotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAnnotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExperimentInformationCompletedEventHandler(object sender, GetExperimentInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExperimentInformation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExperimentInformation[])(this.results[0]));
            }
        }
    }
}
