//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.ESS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.StorageTypes;
    using iLabs.DataTypes.TicketingTypes;

    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IESS", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class ExperimentStorageProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback CloseExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenExperimentOperationCompleted;
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback GetIdleTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetExperimentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordAttributesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRecordAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBlobToRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelBlobStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBlobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlobAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlobExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlobsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlobsForRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlobStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedBlobImportProtocolsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedBlobExportProtocolsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedChecksumAlgorithmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestBlobAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestBlobStorageOperationCompleted;
        
        /// <remarks/>
        public ExperimentStorageProxy() {
            this.Url = "http://localhost/ilab_WSDL/I_ESS.asmx";
        }
        
        /// <remarks/>
        public event CloseExperimentCompletedEventHandler CloseExperimentCompleted;
        
        /// <remarks/>
        public event DeleteExperimentCompletedEventHandler DeleteExperimentCompleted;
        
        /// <remarks/>
        public event OpenExperimentCompletedEventHandler OpenExperimentCompleted;
        
        /// <remarks/>
        public event GetIdleTimeCompletedEventHandler GetIdleTimeCompleted;
        
        /// <remarks/>
        public event GetExperimentStatusCompletedEventHandler GetExperimentStatusCompleted;
        
        /// <remarks/>
        public event SetExperimentStatusCompletedEventHandler SetExperimentStatusCompleted;
        
        /// <remarks/>
        public event AddRecordCompletedEventHandler AddRecordCompleted;
        
        /// <remarks/>
        public event AddRecordsCompletedEventHandler AddRecordsCompleted;
        
        /// <remarks/>
        public event GetRecordCompletedEventHandler GetRecordCompleted;
        
        /// <remarks/>
        public event GetRecordsCompletedEventHandler GetRecordsCompleted;
        
        /// <remarks/>
        public event GetExperimentCompletedEventHandler GetExperimentCompleted;
        
        /// <remarks/>
        public event GetExperimentIDsCompletedEventHandler GetExperimentIDsCompleted;
        
        /// <remarks/>
        public event AddAttributesCompletedEventHandler AddAttributesCompleted;
        
        /// <remarks/>
        public event GetRecordAttributesCompletedEventHandler GetRecordAttributesCompleted;
        
        /// <remarks/>
        public event GetRecordAttributesByNameCompletedEventHandler GetRecordAttributesByNameCompleted;
        
        /// <remarks/>
        public event DeleteRecordAttributesCompletedEventHandler DeleteRecordAttributesCompleted;
        
        /// <remarks/>
        public event AddBlobToRecordCompletedEventHandler AddBlobToRecordCompleted;
        
        /// <remarks/>
        public event CancelBlobStorageCompletedEventHandler CancelBlobStorageCompleted;
        
        /// <remarks/>
        public event CreateBlobCompletedEventHandler CreateBlobCompleted;
        
        /// <remarks/>
        public event GetBlobAssociationCompletedEventHandler GetBlobAssociationCompleted;
        
        /// <remarks/>
        public event GetBlobExperimentCompletedEventHandler GetBlobExperimentCompleted;
        
        /// <remarks/>
        public event GetBlobsCompletedEventHandler GetBlobsCompleted;
        
        /// <remarks/>
        public event GetBlobsForRecordCompletedEventHandler GetBlobsForRecordCompleted;
        
        /// <remarks/>
        public event GetBlobStatusCompletedEventHandler GetBlobStatusCompleted;
        
        /// <remarks/>
        public event GetSupportedBlobImportProtocolsCompletedEventHandler GetSupportedBlobImportProtocolsCompleted;
        
        /// <remarks/>
        public event GetSupportedBlobExportProtocolsCompletedEventHandler GetSupportedBlobExportProtocolsCompleted;
        
        /// <remarks/>
        public event GetSupportedChecksumAlgorithmsCompletedEventHandler GetSupportedChecksumAlgorithmsCompleted;
        
        /// <remarks/>
        public event RequestBlobAccessCompletedEventHandler RequestBlobAccessCompleted;
        
        /// <remarks/>
        public event RequestBlobStorageCompletedEventHandler RequestBlobStorageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/CloseExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus CloseExperiment(long experimentId) {
            object[] results = this.Invoke("CloseExperiment", new object[] {
                        experimentId});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseExperiment(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseExperiment", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndCloseExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void CloseExperimentAsync(long experimentId) {
            this.CloseExperimentAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void CloseExperimentAsync(long experimentId, object userState) {
            if ((this.CloseExperimentOperationCompleted == null)) {
                this.CloseExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseExperimentOperationCompleted);
            }
            this.InvokeAsync("CloseExperiment", new object[] {
                        experimentId}, this.CloseExperimentOperationCompleted, userState);
        }
        
        private void OnCloseExperimentOperationCompleted(object arg) {
            if ((this.CloseExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseExperimentCompleted(this, new CloseExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/DeleteExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteExperiment(long experimentId) {
            object[] results = this.Invoke("DeleteExperiment", new object[] {
                        experimentId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteExperiment(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteExperiment", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteExperimentAsync(long experimentId) {
            this.DeleteExperimentAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void DeleteExperimentAsync(long experimentId, object userState) {
            if ((this.DeleteExperimentOperationCompleted == null)) {
                this.DeleteExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteExperimentOperationCompleted);
            }
            this.InvokeAsync("DeleteExperiment", new object[] {
                        experimentId}, this.DeleteExperimentOperationCompleted, userState);
        }
        
        private void OnDeleteExperimentOperationCompleted(object arg) {
            if ((this.DeleteExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteExperimentCompleted(this, new DeleteExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/OpenExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus OpenExperiment(long experimentId, long duration) {
            object[] results = this.Invoke("OpenExperiment", new object[] {
                        experimentId,
                        duration});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenExperiment(long experimentId, long duration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenExperiment", new object[] {
                        experimentId,
                        duration}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndOpenExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void OpenExperimentAsync(long experimentId, long duration) {
            this.OpenExperimentAsync(experimentId, duration, null);
        }
        
        /// <remarks/>
        public void OpenExperimentAsync(long experimentId, long duration, object userState) {
            if ((this.OpenExperimentOperationCompleted == null)) {
                this.OpenExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenExperimentOperationCompleted);
            }
            this.InvokeAsync("OpenExperiment", new object[] {
                        experimentId,
                        duration}, this.OpenExperimentOperationCompleted, userState);
        }
        
        private void OnOpenExperimentOperationCompleted(object arg) {
            if ((this.OpenExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenExperimentCompleted(this, new OpenExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetIdleTime", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetIdleTime(long experimentId) {
            object[] results = this.Invoke("GetIdleTime", new object[] {
                        experimentId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIdleTime(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIdleTime", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetIdleTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetIdleTimeAsync(long experimentId) {
            this.GetIdleTimeAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void GetIdleTimeAsync(long experimentId, object userState) {
            if ((this.GetIdleTimeOperationCompleted == null)) {
                this.GetIdleTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIdleTimeOperationCompleted);
            }
            this.InvokeAsync("GetIdleTime", new object[] {
                        experimentId}, this.GetIdleTimeOperationCompleted, userState);
        }
        
        private void OnGetIdleTimeOperationCompleted(object arg) {
            if ((this.GetIdleTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIdleTimeCompleted(this, new GetIdleTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetExperimentStatus", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus GetExperimentStatus(long experimentId) {
            object[] results = this.Invoke("GetExperimentStatus", new object[] {
                        experimentId});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperimentStatus(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperimentStatus", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndGetExperimentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(long experimentId) {
            this.GetExperimentStatusAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(long experimentId, object userState) {
            if ((this.GetExperimentStatusOperationCompleted == null)) {
                this.GetExperimentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentStatusOperationCompleted);
            }
            this.InvokeAsync("GetExperimentStatus", new object[] {
                        experimentId}, this.GetExperimentStatusOperationCompleted, userState);
        }
        
        private void OnGetExperimentStatusOperationCompleted(object arg) {
            if ((this.GetExperimentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentStatusCompleted(this, new GetExperimentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/SetExperimentStatus", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus SetExperimentStatus(long experimentId, int statusCode) {
            object[] results = this.Invoke("SetExperimentStatus", new object[] {
                        experimentId,
                        statusCode});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetExperimentStatus(long experimentId, int statusCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetExperimentStatus", new object[] {
                        experimentId,
                        statusCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndSetExperimentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void SetExperimentStatusAsync(long experimentId, int statusCode) {
            this.SetExperimentStatusAsync(experimentId, statusCode, null);
        }
        
        /// <remarks/>
        public void SetExperimentStatusAsync(long experimentId, int statusCode, object userState) {
            if ((this.SetExperimentStatusOperationCompleted == null)) {
                this.SetExperimentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetExperimentStatusOperationCompleted);
            }
            this.InvokeAsync("SetExperimentStatus", new object[] {
                        experimentId,
                        statusCode}, this.SetExperimentStatusOperationCompleted, userState);
        }
        
        private void OnSetExperimentStatusOperationCompleted(object arg) {
            if ((this.SetExperimentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetExperimentStatusCompleted(this, new SetExperimentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddRecord", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRecord(long experimentId, string submitter, string type, bool xmlSearchable, string contents, RecordAttribute[] attributes) {
            object[] results = this.Invoke("AddRecord", new object[] {
                        experimentId,
                        submitter,
                        type,
                        xmlSearchable,
                        contents,
                        attributes});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRecord(long experimentId, string submitter, string type, bool xmlSearchable, string contents, RecordAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRecord", new object[] {
                        experimentId,
                        submitter,
                        type,
                        xmlSearchable,
                        contents,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRecordAsync(long experimentId, string submitter, string type, bool xmlSearchable, string contents, RecordAttribute[] attributes) {
            this.AddRecordAsync(experimentId, submitter, type, xmlSearchable, contents, attributes, null);
        }
        
        /// <remarks/>
        public void AddRecordAsync(long experimentId, string submitter, string type, bool xmlSearchable, string contents, RecordAttribute[] attributes, object userState) {
            if ((this.AddRecordOperationCompleted == null)) {
                this.AddRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRecordOperationCompleted);
            }
            this.InvokeAsync("AddRecord", new object[] {
                        experimentId,
                        submitter,
                        type,
                        xmlSearchable,
                        contents,
                        attributes}, this.AddRecordOperationCompleted, userState);
        }
        
        private void OnAddRecordOperationCompleted(object arg) {
            if ((this.AddRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRecordCompleted(this, new AddRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddRecords", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRecords(long experimentId, ExperimentRecord[] records) {
            object[] results = this.Invoke("AddRecords", new object[] {
                        experimentId,
                        records});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRecords(long experimentId, ExperimentRecord[] records, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRecords", new object[] {
                        experimentId,
                        records}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRecordsAsync(long experimentId, ExperimentRecord[] records) {
            this.AddRecordsAsync(experimentId, records, null);
        }
        
        /// <remarks/>
        public void AddRecordsAsync(long experimentId, ExperimentRecord[] records, object userState) {
            if ((this.AddRecordsOperationCompleted == null)) {
                this.AddRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRecordsOperationCompleted);
            }
            this.InvokeAsync("AddRecords", new object[] {
                        experimentId,
                        records}, this.AddRecordsOperationCompleted, userState);
        }
        
        private void OnAddRecordsOperationCompleted(object arg) {
            if ((this.AddRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRecordsCompleted(this, new AddRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetRecord", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExperimentRecord GetRecord(long experimentId, int sequenceNum) {
            object[] results = this.Invoke("GetRecord", new object[] {
                        experimentId,
                        sequenceNum});
            return ((ExperimentRecord)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecord(long experimentId, int sequenceNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecord", new object[] {
                        experimentId,
                        sequenceNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExperimentRecord EndGetRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExperimentRecord)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordAsync(long experimentId, int sequenceNum) {
            this.GetRecordAsync(experimentId, sequenceNum, null);
        }
        
        /// <remarks/>
        public void GetRecordAsync(long experimentId, int sequenceNum, object userState) {
            if ((this.GetRecordOperationCompleted == null)) {
                this.GetRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordOperationCompleted);
            }
            this.InvokeAsync("GetRecord", new object[] {
                        experimentId,
                        sequenceNum}, this.GetRecordOperationCompleted, userState);
        }
        
        private void OnGetRecordOperationCompleted(object arg) {
            if ((this.GetRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordCompleted(this, new GetRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetRecords", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExperimentRecord[] GetRecords(long experimentId, Criterion[] target) {
            object[] results = this.Invoke("GetRecords", new object[] {
                        experimentId,
                        target});
            return ((ExperimentRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecords(long experimentId, Criterion[] target, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecords", new object[] {
                        experimentId,
                        target}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExperimentRecord[] EndGetRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExperimentRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordsAsync(long experimentId, Criterion[] target) {
            this.GetRecordsAsync(experimentId, target, null);
        }
        
        /// <remarks/>
        public void GetRecordsAsync(long experimentId, Criterion[] target, object userState) {
            if ((this.GetRecordsOperationCompleted == null)) {
                this.GetRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordsOperationCompleted);
            }
            this.InvokeAsync("GetRecords", new object[] {
                        experimentId,
                        target}, this.GetRecordsOperationCompleted, userState);
        }
        
        private void OnGetRecordsOperationCompleted(object arg) {
            if ((this.GetRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordsCompleted(this, new GetRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Experiment GetExperiment(long experimentId) {
            object[] results = this.Invoke("GetExperiment", new object[] {
                        experimentId});
            return ((Experiment)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperiment(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperiment", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Experiment EndGetExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Experiment)(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentAsync(long experimentId) {
            this.GetExperimentAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void GetExperimentAsync(long experimentId, object userState) {
            if ((this.GetExperimentOperationCompleted == null)) {
                this.GetExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentOperationCompleted);
            }
            this.InvokeAsync("GetExperiment", new object[] {
                        experimentId}, this.GetExperimentOperationCompleted, userState);
        }
        
        private void OnGetExperimentOperationCompleted(object arg) {
            if ((this.GetExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentCompleted(this, new GetExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetExperimentIDs", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] GetExperimentIDs(long[] expSet, Criterion[] filter) {
            object[] results = this.Invoke("GetExperimentIDs", new object[] {
                        expSet,
                        filter});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperimentIDs(long[] expSet, Criterion[] filter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperimentIDs", new object[] {
                        expSet,
                        filter}, callback, asyncState);
        }
        
        /// <remarks/>
        public long[] EndGetExperimentIDs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentIDsAsync(long[] expSet, Criterion[] filter) {
            this.GetExperimentIDsAsync(expSet, filter, null);
        }
        
        /// <remarks/>
        public void GetExperimentIDsAsync(long[] expSet, Criterion[] filter, object userState) {
            if ((this.GetExperimentIDsOperationCompleted == null)) {
                this.GetExperimentIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentIDsOperationCompleted);
            }
            this.InvokeAsync("GetExperimentIDs", new object[] {
                        expSet,
                        filter}, this.GetExperimentIDsOperationCompleted, userState);
        }
        
        private void OnGetExperimentIDsOperationCompleted(object arg) {
            if ((this.GetExperimentIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentIDsCompleted(this, new GetExperimentIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddAttributes", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] AddAttributes(long experimentId, int sequenceNum, RecordAttribute[] attributes) {
            object[] results = this.Invoke("AddAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributes});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddAttributes(long experimentId, int sequenceNum, RecordAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndAddAttributes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void AddAttributesAsync(long experimentId, int sequenceNum, RecordAttribute[] attributes) {
            this.AddAttributesAsync(experimentId, sequenceNum, attributes, null);
        }
        
        /// <remarks/>
        public void AddAttributesAsync(long experimentId, int sequenceNum, RecordAttribute[] attributes, object userState) {
            if ((this.AddAttributesOperationCompleted == null)) {
                this.AddAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttributesOperationCompleted);
            }
            this.InvokeAsync("AddAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributes}, this.AddAttributesOperationCompleted, userState);
        }
        
        private void OnAddAttributesOperationCompleted(object arg) {
            if ((this.AddAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttributesCompleted(this, new AddAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetRecordAttributes", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecordAttribute[] GetRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds) {
            object[] results = this.Invoke("GetRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds});
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public RecordAttribute[] EndGetRecordAttributes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordAttributesAsync(long experimentId, int sequenceNum, int[] attributeIds) {
            this.GetRecordAttributesAsync(experimentId, sequenceNum, attributeIds, null);
        }
        
        /// <remarks/>
        public void GetRecordAttributesAsync(long experimentId, int sequenceNum, int[] attributeIds, object userState) {
            if ((this.GetRecordAttributesOperationCompleted == null)) {
                this.GetRecordAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordAttributesOperationCompleted);
            }
            this.InvokeAsync("GetRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds}, this.GetRecordAttributesOperationCompleted, userState);
        }
        
        private void OnGetRecordAttributesOperationCompleted(object arg) {
            if ((this.GetRecordAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordAttributesCompleted(this, new GetRecordAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetRecordAttributesByName", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecordAttribute[] GetRecordAttributesByName(long experimentId, int sequenceNum, string attributeName) {
            object[] results = this.Invoke("GetRecordAttributesByName", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeName});
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecordAttributesByName(long experimentId, int sequenceNum, string attributeName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecordAttributesByName", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RecordAttribute[] EndGetRecordAttributesByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordAttributesByNameAsync(long experimentId, int sequenceNum, string attributeName) {
            this.GetRecordAttributesByNameAsync(experimentId, sequenceNum, attributeName, null);
        }
        
        /// <remarks/>
        public void GetRecordAttributesByNameAsync(long experimentId, int sequenceNum, string attributeName, object userState) {
            if ((this.GetRecordAttributesByNameOperationCompleted == null)) {
                this.GetRecordAttributesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordAttributesByNameOperationCompleted);
            }
            this.InvokeAsync("GetRecordAttributesByName", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeName}, this.GetRecordAttributesByNameOperationCompleted, userState);
        }
        
        private void OnGetRecordAttributesByNameOperationCompleted(object arg) {
            if ((this.GetRecordAttributesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordAttributesByNameCompleted(this, new GetRecordAttributesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/DeleteRecordAttributes", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecordAttribute[] DeleteRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds) {
            object[] results = this.Invoke("DeleteRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds});
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public RecordAttribute[] EndDeleteRecordAttributes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RecordAttribute[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRecordAttributesAsync(long experimentId, int sequenceNum, int[] attributeIds) {
            this.DeleteRecordAttributesAsync(experimentId, sequenceNum, attributeIds, null);
        }
        
        /// <remarks/>
        public void DeleteRecordAttributesAsync(long experimentId, int sequenceNum, int[] attributeIds, object userState) {
            if ((this.DeleteRecordAttributesOperationCompleted == null)) {
                this.DeleteRecordAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRecordAttributesOperationCompleted);
            }
            this.InvokeAsync("DeleteRecordAttributes", new object[] {
                        experimentId,
                        sequenceNum,
                        attributeIds}, this.DeleteRecordAttributesOperationCompleted, userState);
        }
        
        private void OnDeleteRecordAttributesOperationCompleted(object arg) {
            if ((this.DeleteRecordAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRecordAttributesCompleted(this, new DeleteRecordAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddBlobToRecord", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddBlobToRecord(long blobId, long experimentId, int sequenceNum) {
            object[] results = this.Invoke("AddBlobToRecord", new object[] {
                        blobId,
                        experimentId,
                        sequenceNum});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddBlobToRecord(long blobId, long experimentId, int sequenceNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddBlobToRecord", new object[] {
                        blobId,
                        experimentId,
                        sequenceNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddBlobToRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddBlobToRecordAsync(long blobId, long experimentId, int sequenceNum) {
            this.AddBlobToRecordAsync(blobId, experimentId, sequenceNum, null);
        }
        
        /// <remarks/>
        public void AddBlobToRecordAsync(long blobId, long experimentId, int sequenceNum, object userState) {
            if ((this.AddBlobToRecordOperationCompleted == null)) {
                this.AddBlobToRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBlobToRecordOperationCompleted);
            }
            this.InvokeAsync("AddBlobToRecord", new object[] {
                        blobId,
                        experimentId,
                        sequenceNum}, this.AddBlobToRecordOperationCompleted, userState);
        }
        
        private void OnAddBlobToRecordOperationCompleted(object arg) {
            if ((this.AddBlobToRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBlobToRecordCompleted(this, new AddBlobToRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/CancelBlobStorage", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelBlobStorage(long blobId) {
            object[] results = this.Invoke("CancelBlobStorage", new object[] {
                        blobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelBlobStorage(long blobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelBlobStorage", new object[] {
                        blobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCancelBlobStorage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelBlobStorageAsync(long blobId) {
            this.CancelBlobStorageAsync(blobId, null);
        }
        
        /// <remarks/>
        public void CancelBlobStorageAsync(long blobId, object userState) {
            if ((this.CancelBlobStorageOperationCompleted == null)) {
                this.CancelBlobStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelBlobStorageOperationCompleted);
            }
            this.InvokeAsync("CancelBlobStorage", new object[] {
                        blobId}, this.CancelBlobStorageOperationCompleted, userState);
        }
        
        private void OnCancelBlobStorageOperationCompleted(object arg) {
            if ((this.CancelBlobStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelBlobStorageCompleted(this, new CancelBlobStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/CreateBlob", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateBlob(long experimentId, string description, int byteCount, string checksum, string checksumAlgorithm) {
            object[] results = this.Invoke("CreateBlob", new object[] {
                        experimentId,
                        description,
                        byteCount,
                        checksum,
                        checksumAlgorithm});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateBlob(long experimentId, string description, int byteCount, string checksum, string checksumAlgorithm, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateBlob", new object[] {
                        experimentId,
                        description,
                        byteCount,
                        checksum,
                        checksumAlgorithm}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndCreateBlob(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBlobAsync(long experimentId, string description, int byteCount, string checksum, string checksumAlgorithm) {
            this.CreateBlobAsync(experimentId, description, byteCount, checksum, checksumAlgorithm, null);
        }
        
        /// <remarks/>
        public void CreateBlobAsync(long experimentId, string description, int byteCount, string checksum, string checksumAlgorithm, object userState) {
            if ((this.CreateBlobOperationCompleted == null)) {
                this.CreateBlobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBlobOperationCompleted);
            }
            this.InvokeAsync("CreateBlob", new object[] {
                        experimentId,
                        description,
                        byteCount,
                        checksum,
                        checksumAlgorithm}, this.CreateBlobOperationCompleted, userState);
        }
        
        private void OnCreateBlobOperationCompleted(object arg) {
            if ((this.CreateBlobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBlobCompleted(this, new CreateBlobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobAssociation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetBlobAssociation(long blobId) {
            object[] results = this.Invoke("GetBlobAssociation", new object[] {
                        blobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlobAssociation(long blobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlobAssociation", new object[] {
                        blobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetBlobAssociation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlobAssociationAsync(long blobId) {
            this.GetBlobAssociationAsync(blobId, null);
        }
        
        /// <remarks/>
        public void GetBlobAssociationAsync(long blobId, object userState) {
            if ((this.GetBlobAssociationOperationCompleted == null)) {
                this.GetBlobAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobAssociationOperationCompleted);
            }
            this.InvokeAsync("GetBlobAssociation", new object[] {
                        blobId}, this.GetBlobAssociationOperationCompleted, userState);
        }
        
        private void OnGetBlobAssociationOperationCompleted(object arg) {
            if ((this.GetBlobAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlobAssociationCompleted(this, new GetBlobAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetBlobExperiment(long blobId) {
            object[] results = this.Invoke("GetBlobExperiment", new object[] {
                        blobId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlobExperiment(long blobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlobExperiment", new object[] {
                        blobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndGetBlobExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlobExperimentAsync(long blobId) {
            this.GetBlobExperimentAsync(blobId, null);
        }
        
        /// <remarks/>
        public void GetBlobExperimentAsync(long blobId, object userState) {
            if ((this.GetBlobExperimentOperationCompleted == null)) {
                this.GetBlobExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobExperimentOperationCompleted);
            }
            this.InvokeAsync("GetBlobExperiment", new object[] {
                        blobId}, this.GetBlobExperimentOperationCompleted, userState);
        }
        
        private void OnGetBlobExperimentOperationCompleted(object arg) {
            if ((this.GetBlobExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlobExperimentCompleted(this, new GetBlobExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobs", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Blob[] GetBlobs(long experimentId) {
            object[] results = this.Invoke("GetBlobs", new object[] {
                        experimentId});
            return ((Blob[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlobs(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlobs", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Blob[] EndGetBlobs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Blob[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBlobsAsync(long experimentId) {
            this.GetBlobsAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void GetBlobsAsync(long experimentId, object userState) {
            if ((this.GetBlobsOperationCompleted == null)) {
                this.GetBlobsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobsOperationCompleted);
            }
            this.InvokeAsync("GetBlobs", new object[] {
                        experimentId}, this.GetBlobsOperationCompleted, userState);
        }
        
        private void OnGetBlobsOperationCompleted(object arg) {
            if ((this.GetBlobsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlobsCompleted(this, new GetBlobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobsForRecord", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Blob[] GetBlobsForRecord(long experimentId, int sequenceNum) {
            object[] results = this.Invoke("GetBlobsForRecord", new object[] {
                        experimentId,
                        sequenceNum});
            return ((Blob[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlobsForRecord(long experimentId, int sequenceNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlobsForRecord", new object[] {
                        experimentId,
                        sequenceNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public Blob[] EndGetBlobsForRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Blob[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBlobsForRecordAsync(long experimentId, int sequenceNum) {
            this.GetBlobsForRecordAsync(experimentId, sequenceNum, null);
        }
        
        /// <remarks/>
        public void GetBlobsForRecordAsync(long experimentId, int sequenceNum, object userState) {
            if ((this.GetBlobsForRecordOperationCompleted == null)) {
                this.GetBlobsForRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobsForRecordOperationCompleted);
            }
            this.InvokeAsync("GetBlobsForRecord", new object[] {
                        experimentId,
                        sequenceNum}, this.GetBlobsForRecordOperationCompleted, userState);
        }
        
        private void OnGetBlobsForRecordOperationCompleted(object arg) {
            if ((this.GetBlobsForRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlobsForRecordCompleted(this, new GetBlobsForRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobStatus", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetBlobStatus(long blobId) {
            object[] results = this.Invoke("GetBlobStatus", new object[] {
                        blobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlobStatus(long blobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlobStatus", new object[] {
                        blobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetBlobStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlobStatusAsync(long blobId) {
            this.GetBlobStatusAsync(blobId, null);
        }
        
        /// <remarks/>
        public void GetBlobStatusAsync(long blobId, object userState) {
            if ((this.GetBlobStatusOperationCompleted == null)) {
                this.GetBlobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobStatusOperationCompleted);
            }
            this.InvokeAsync("GetBlobStatus", new object[] {
                        blobId}, this.GetBlobStatusOperationCompleted, userState);
        }
        
        private void OnGetBlobStatusOperationCompleted(object arg) {
            if ((this.GetBlobStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlobStatusCompleted(this, new GetBlobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetSupportedBlobImportProtocols", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSupportedBlobImportProtocols() {
            object[] results = this.Invoke("GetSupportedBlobImportProtocols", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportedBlobImportProtocols(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportedBlobImportProtocols", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSupportedBlobImportProtocols(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedBlobImportProtocolsAsync() {
            this.GetSupportedBlobImportProtocolsAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedBlobImportProtocolsAsync(object userState) {
            if ((this.GetSupportedBlobImportProtocolsOperationCompleted == null)) {
                this.GetSupportedBlobImportProtocolsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedBlobImportProtocolsOperationCompleted);
            }
            this.InvokeAsync("GetSupportedBlobImportProtocols", new object[0], this.GetSupportedBlobImportProtocolsOperationCompleted, userState);
        }
        
        private void OnGetSupportedBlobImportProtocolsOperationCompleted(object arg) {
            if ((this.GetSupportedBlobImportProtocolsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedBlobImportProtocolsCompleted(this, new GetSupportedBlobImportProtocolsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetSupportedBlobExportProtocols", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSupportedBlobExportProtocols() {
            object[] results = this.Invoke("GetSupportedBlobExportProtocols", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportedBlobExportProtocols(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportedBlobExportProtocols", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSupportedBlobExportProtocols(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedBlobExportProtocolsAsync() {
            this.GetSupportedBlobExportProtocolsAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedBlobExportProtocolsAsync(object userState) {
            if ((this.GetSupportedBlobExportProtocolsOperationCompleted == null)) {
                this.GetSupportedBlobExportProtocolsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedBlobExportProtocolsOperationCompleted);
            }
            this.InvokeAsync("GetSupportedBlobExportProtocols", new object[0], this.GetSupportedBlobExportProtocolsOperationCompleted, userState);
        }
        
        private void OnGetSupportedBlobExportProtocolsOperationCompleted(object arg) {
            if ((this.GetSupportedBlobExportProtocolsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedBlobExportProtocolsCompleted(this, new GetSupportedBlobExportProtocolsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetSupportedChecksumAlgorithms", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSupportedChecksumAlgorithms() {
            object[] results = this.Invoke("GetSupportedChecksumAlgorithms", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportedChecksumAlgorithms(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportedChecksumAlgorithms", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSupportedChecksumAlgorithms(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedChecksumAlgorithmsAsync() {
            this.GetSupportedChecksumAlgorithmsAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedChecksumAlgorithmsAsync(object userState) {
            if ((this.GetSupportedChecksumAlgorithmsOperationCompleted == null)) {
                this.GetSupportedChecksumAlgorithmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedChecksumAlgorithmsOperationCompleted);
            }
            this.InvokeAsync("GetSupportedChecksumAlgorithms", new object[0], this.GetSupportedChecksumAlgorithmsOperationCompleted, userState);
        }
        
        private void OnGetSupportedChecksumAlgorithmsOperationCompleted(object arg) {
            if ((this.GetSupportedChecksumAlgorithmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedChecksumAlgorithmsCompleted(this, new GetSupportedChecksumAlgorithmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RequestBlobAccess", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequestBlobAccess(long blobId, string protocol, int duration) {
            object[] results = this.Invoke("RequestBlobAccess", new object[] {
                        blobId,
                        protocol,
                        duration});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestBlobAccess(long blobId, string protocol, int duration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestBlobAccess", new object[] {
                        blobId,
                        protocol,
                        duration}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRequestBlobAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestBlobAccessAsync(long blobId, string protocol, int duration) {
            this.RequestBlobAccessAsync(blobId, protocol, duration, null);
        }
        
        /// <remarks/>
        public void RequestBlobAccessAsync(long blobId, string protocol, int duration, object userState) {
            if ((this.RequestBlobAccessOperationCompleted == null)) {
                this.RequestBlobAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestBlobAccessOperationCompleted);
            }
            this.InvokeAsync("RequestBlobAccess", new object[] {
                        blobId,
                        protocol,
                        duration}, this.RequestBlobAccessOperationCompleted, userState);
        }
        
        private void OnRequestBlobAccessOperationCompleted(object arg) {
            if ((this.RequestBlobAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestBlobAccessCompleted(this, new RequestBlobAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RequestBlobStorage", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RequestBlobStorage(long blobId, string blobUrl) {
            object[] results = this.Invoke("RequestBlobStorage", new object[] {
                        blobId,
                        blobUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestBlobStorage(long blobId, string blobUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestBlobStorage", new object[] {
                        blobId,
                        blobUrl}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRequestBlobStorage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RequestBlobStorageAsync(long blobId, string blobUrl) {
            this.RequestBlobStorageAsync(blobId, blobUrl, null);
        }
        
        /// <remarks/>
        public void RequestBlobStorageAsync(long blobId, string blobUrl, object userState) {
            if ((this.RequestBlobStorageOperationCompleted == null)) {
                this.RequestBlobStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestBlobStorageOperationCompleted);
            }
            this.InvokeAsync("RequestBlobStorage", new object[] {
                        blobId,
                        blobUrl}, this.RequestBlobStorageOperationCompleted, userState);
        }
        
        private void OnRequestBlobStorageOperationCompleted(object arg) {
            if ((this.RequestBlobStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestBlobStorageCompleted(this, new RequestBlobStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
   
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CloseExperimentCompletedEventHandler(object sender, CloseExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteExperimentCompletedEventHandler(object sender, DeleteExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void OpenExperimentCompletedEventHandler(object sender, OpenExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIdleTimeCompletedEventHandler(object sender, GetIdleTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIdleTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIdleTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExperimentStatusCompletedEventHandler(object sender, GetExperimentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetExperimentStatusCompletedEventHandler(object sender, SetExperimentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetExperimentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetExperimentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddRecordCompletedEventHandler(object sender, AddRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddRecordsCompletedEventHandler(object sender, AddRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecordCompletedEventHandler(object sender, GetRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExperimentRecord Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExperimentRecord)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecordsCompletedEventHandler(object sender, GetRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExperimentRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExperimentRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExperimentCompletedEventHandler(object sender, GetExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Experiment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Experiment)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExperimentIDsCompletedEventHandler(object sender, GetExperimentIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddAttributesCompletedEventHandler(object sender, AddAttributesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecordAttributesCompletedEventHandler(object sender, GetRecordAttributesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecordAttribute[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecordAttribute[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecordAttributesByNameCompletedEventHandler(object sender, GetRecordAttributesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordAttributesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordAttributesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecordAttribute[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecordAttribute[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteRecordAttributesCompletedEventHandler(object sender, DeleteRecordAttributesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRecordAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRecordAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecordAttribute[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecordAttribute[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddBlobToRecordCompletedEventHandler(object sender, AddBlobToRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBlobToRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBlobToRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelBlobStorageCompletedEventHandler(object sender, CancelBlobStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelBlobStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelBlobStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateBlobCompletedEventHandler(object sender, CreateBlobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBlobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBlobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBlobAssociationCompletedEventHandler(object sender, GetBlobAssociationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlobAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlobAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBlobExperimentCompletedEventHandler(object sender, GetBlobExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlobExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlobExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBlobsCompletedEventHandler(object sender, GetBlobsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlobsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlobsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Blob[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Blob[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBlobsForRecordCompletedEventHandler(object sender, GetBlobsForRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlobsForRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlobsForRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Blob[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Blob[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBlobStatusCompletedEventHandler(object sender, GetBlobStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSupportedBlobImportProtocolsCompletedEventHandler(object sender, GetSupportedBlobImportProtocolsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedBlobImportProtocolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedBlobImportProtocolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSupportedBlobExportProtocolsCompletedEventHandler(object sender, GetSupportedBlobExportProtocolsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedBlobExportProtocolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedBlobExportProtocolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSupportedChecksumAlgorithmsCompletedEventHandler(object sender, GetSupportedChecksumAlgorithmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedChecksumAlgorithmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedChecksumAlgorithmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestBlobAccessCompletedEventHandler(object sender, RequestBlobAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestBlobAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestBlobAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestBlobStorageCompletedEventHandler(object sender, RequestBlobStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestBlobStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestBlobStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
