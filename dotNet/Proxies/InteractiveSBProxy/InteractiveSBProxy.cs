//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Proxies.ISB {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;

    using iLabs.DataTypes;
    using iLabs.DataTypes.BatchTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.StorageTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IServiceBroker", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class InteractiveSBProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback SaveClientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadClientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListClientDataItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LaunchLabClientOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback RequestAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgentCloseExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientCloseExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveExperimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveExperimentSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveExperimentRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestExperimentAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeReservationOperationCompleted;
        
        /// <remarks/>
        public InteractiveSBProxy() {
            this.Url = "http://localhost/IWSDL/I_ServiceBroker.asmx";
        }
        
        /// <remarks/>
        public event SaveClientDataCompletedEventHandler SaveClientDataCompleted;
        
        /// <remarks/>
        public event LoadClientDataCompletedEventHandler LoadClientDataCompleted;
        
        /// <remarks/>
        public event DeleteClientDataCompletedEventHandler DeleteClientDataCompleted;
        
        /// <remarks/>
        public event ListClientDataItemsCompletedEventHandler ListClientDataItemsCompleted;
        
        /// <remarks/>
        public event GetUserStatusCompletedEventHandler GetUserStatusCompleted;
        
        /// <remarks/>
        public event ModifyUserCompletedEventHandler ModifyUserCompleted;
        
        /// <remarks/>
        public event LaunchLabClientCompletedEventHandler LaunchLabClientCompleted;
        
        /// <remarks/>
        public event RequestAuthorizationCompletedEventHandler RequestAuthorizationCompleted;
        
        /// <remarks/>
        public event CreateExperimentCompletedEventHandler CreateExperimentCompleted;
        
        /// <remarks/>
        public event OpenExperimentCompletedEventHandler OpenExperimentCompleted;
        
        /// <remarks/>
        public event AgentCloseExperimentCompletedEventHandler AgentCloseExperimentCompleted;
        
        /// <remarks/>
        public event ClientCloseExperimentCompletedEventHandler ClientCloseExperimentCompleted;
        
        /// <remarks/>
        public event RetrieveExperimentCompletedEventHandler RetrieveExperimentCompleted;
        
        /// <remarks/>
        public event RetrieveExperimentSummaryCompletedEventHandler RetrieveExperimentSummaryCompleted;
        
        /// <remarks/>
        public event RetrieveExperimentRecordsCompletedEventHandler RetrieveExperimentRecordsCompleted;
        
        /// <remarks/>
        public event RequestExperimentAccessCompletedEventHandler RequestExperimentAccessCompleted;
        
        /// <remarks/>
        public event SetAnnotationCompletedEventHandler SetAnnotationCompleted;
        
        /// <remarks/>
        public event GetAnnotationCompletedEventHandler GetAnnotationCompleted;
        
        /// <remarks/>
        public event RevokeReservationCompletedEventHandler RevokeReservationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/SaveClientData", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveClientData(string name, string itemValue) {
            this.Invoke("SaveClientData", new object[] {
                        name,
                        itemValue});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveClientData(string name, string itemValue, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveClientData", new object[] {
                        name,
                        itemValue}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveClientData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveClientDataAsync(string name, string itemValue) {
            this.SaveClientDataAsync(name, itemValue, null);
        }
        
        /// <remarks/>
        public void SaveClientDataAsync(string name, string itemValue, object userState) {
            if ((this.SaveClientDataOperationCompleted == null)) {
                this.SaveClientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveClientDataOperationCompleted);
            }
            this.InvokeAsync("SaveClientData", new object[] {
                        name,
                        itemValue}, this.SaveClientDataOperationCompleted, userState);
        }
        
        private void OnSaveClientDataOperationCompleted(object arg) {
            if ((this.SaveClientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveClientDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/LoadClientData", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadClientData(string name) {
            object[] results = this.Invoke("LoadClientData", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoadClientData(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoadClientData", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLoadClientData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadClientDataAsync(string name) {
            this.LoadClientDataAsync(name, null);
        }
        
        /// <remarks/>
        public void LoadClientDataAsync(string name, object userState) {
            if ((this.LoadClientDataOperationCompleted == null)) {
                this.LoadClientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadClientDataOperationCompleted);
            }
            this.InvokeAsync("LoadClientData", new object[] {
                        name}, this.LoadClientDataOperationCompleted, userState);
        }
        
        private void OnLoadClientDataOperationCompleted(object arg) {
            if ((this.LoadClientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadClientDataCompleted(this, new LoadClientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/DeleteClientData", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClientData(string name) {
            this.Invoke("DeleteClientData", new object[] {
                        name});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteClientData(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteClientData", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteClientData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteClientDataAsync(string name) {
            this.DeleteClientDataAsync(name, null);
        }
        
        /// <remarks/>
        public void DeleteClientDataAsync(string name, object userState) {
            if ((this.DeleteClientDataOperationCompleted == null)) {
                this.DeleteClientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientDataOperationCompleted);
            }
            this.InvokeAsync("DeleteClientData", new object[] {
                        name}, this.DeleteClientDataOperationCompleted, userState);
        }
        
        private void OnDeleteClientDataOperationCompleted(object arg) {
            if ((this.DeleteClientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ListClientDataItems", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ListClientDataItems() {
            object[] results = this.Invoke("ListClientDataItems", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListClientDataItems(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListClientDataItems", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndListClientDataItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ListClientDataItemsAsync() {
            this.ListClientDataItemsAsync(null);
        }
        
        /// <remarks/>
        public void ListClientDataItemsAsync(object userState) {
            if ((this.ListClientDataItemsOperationCompleted == null)) {
                this.ListClientDataItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListClientDataItemsOperationCompleted);
            }
            this.InvokeAsync("ListClientDataItems", new object[0], this.ListClientDataItemsOperationCompleted, userState);
        }
        
        private void OnListClientDataItemsOperationCompleted(object arg) {
            if ((this.ListClientDataItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListClientDataItemsCompleted(this, new ListClientDataItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetUserStatus", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public IntTag GetUserStatus(string userName, string authorityKey) {
            object[] results = this.Invoke("GetUserStatus", new object[] {
                        userName,
                        authorityKey});
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserStatus(string userName, string authorityKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserStatus", new object[] {
                        userName,
                        authorityKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntTag EndGetUserStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string userName, string authorityKey) {
            this.GetUserStatusAsync(userName, authorityKey, null);
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string userName, string authorityKey, object userState) {
            if ((this.GetUserStatusOperationCompleted == null)) {
                this.GetUserStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserStatusOperationCompleted);
            }
            this.InvokeAsync("GetUserStatus", new object[] {
                        userName,
                        authorityKey}, this.GetUserStatusOperationCompleted, userState);
        }
        
        private void OnGetUserStatusOperationCompleted(object arg) {
            if ((this.GetUserStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserStatusCompleted(this, new GetUserStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ModifyUser", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public IntTag ModifyUser(string userName, string authorityKey, string firstName, string lastName, string email, string affiliation, bool autoCreate) {
            object[] results = this.Invoke("ModifyUser", new object[] {
                        userName,
                        authorityKey,
                        firstName,
                        lastName,
                        email,
                        affiliation,
                        autoCreate});
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginModifyUser(string userName, string authorityKey, string firstName, string lastName, string email, string affiliation, bool autoCreate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ModifyUser", new object[] {
                        userName,
                        authorityKey,
                        firstName,
                        lastName,
                        email,
                        affiliation,
                        autoCreate}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntTag EndModifyUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyUserAsync(string userName, string authorityKey, string firstName, string lastName, string email, string affiliation, bool autoCreate) {
            this.ModifyUserAsync(userName, authorityKey, firstName, lastName, email, affiliation, autoCreate, null);
        }
        
        /// <remarks/>
        public void ModifyUserAsync(string userName, string authorityKey, string firstName, string lastName, string email, string affiliation, bool autoCreate, object userState) {
            if ((this.ModifyUserOperationCompleted == null)) {
                this.ModifyUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyUserOperationCompleted);
            }
            this.InvokeAsync("ModifyUser", new object[] {
                        userName,
                        authorityKey,
                        firstName,
                        lastName,
                        email,
                        affiliation,
                        autoCreate}, this.ModifyUserOperationCompleted, userState);
        }
        
        private void OnModifyUserOperationCompleted(object arg) {
            if ((this.ModifyUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyUserCompleted(this, new ModifyUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/LaunchLabClient", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public IntTag LaunchLabClient(string clientGuid, string groupName, string userName, string authorityKey, System.DateTime start, long duration, int autoStart) {
            object[] results = this.Invoke("LaunchLabClient", new object[] {
                        clientGuid,
                        groupName,
                        userName,
                        authorityKey,
                        start,
                        duration,
                        autoStart});
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLaunchLabClient(string clientGuid, string groupName, string userName, string authorityKey, System.DateTime start, long duration, int autoStart, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LaunchLabClient", new object[] {
                        clientGuid,
                        groupName,
                        userName,
                        authorityKey,
                        start,
                        duration,
                        autoStart}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntTag EndLaunchLabClient(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntTag)(results[0]));
        }
        
        /// <remarks/>
        public void LaunchLabClientAsync(string clientGuid, string groupName, string userName, string authorityKey, System.DateTime start, long duration, int autoStart) {
            this.LaunchLabClientAsync(clientGuid, groupName, userName, authorityKey, start, duration, autoStart, null);
        }
        
        /// <remarks/>
        public void LaunchLabClientAsync(string clientGuid, string groupName, string userName, string authorityKey, System.DateTime start, long duration, int autoStart, object userState) {
            if ((this.LaunchLabClientOperationCompleted == null)) {
                this.LaunchLabClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLaunchLabClientOperationCompleted);
            }
            this.InvokeAsync("LaunchLabClient", new object[] {
                        clientGuid,
                        groupName,
                        userName,
                        authorityKey,
                        start,
                        duration,
                        autoStart}, this.LaunchLabClientOperationCompleted, userState);
        }
        
        private void OnLaunchLabClientOperationCompleted(object arg) {
            if ((this.LaunchLabClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LaunchLabClientCompleted(this, new LaunchLabClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RequestAuthorization", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public Coupon RequestAuthorization(string[] types, long duration, string userName, string groupName, string serviceGuid, string clientGuid) {
            object[] results = this.Invoke("RequestAuthorization", new object[] {
                        types,
                        duration,
                        userName,
                        groupName,
                        serviceGuid,
                        clientGuid});
            return ((Coupon)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestAuthorization(string[] types, long duration, string userName, string groupName, string serviceGuid, string clientGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestAuthorization", new object[] {
                        types,
                        duration,
                        userName,
                        groupName,
                        serviceGuid,
                        clientGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Coupon EndRequestAuthorization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Coupon)(results[0]));
        }
        
        /// <remarks/>
        public void RequestAuthorizationAsync(string[] types, long duration, string userName, string groupName, string serviceGuid, string clientGuid) {
            this.RequestAuthorizationAsync(types, duration, userName, groupName, serviceGuid, clientGuid, null);
        }
        
        /// <remarks/>
        public void RequestAuthorizationAsync(string[] types, long duration, string userName, string groupName, string serviceGuid, string clientGuid, object userState) {
            if ((this.RequestAuthorizationOperationCompleted == null)) {
                this.RequestAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAuthorizationOperationCompleted);
            }
            this.InvokeAsync("RequestAuthorization", new object[] {
                        types,
                        duration,
                        userName,
                        groupName,
                        serviceGuid,
                        clientGuid}, this.RequestAuthorizationOperationCompleted, userState);
        }
        
        private void OnRequestAuthorizationOperationCompleted(object arg) {
            if ((this.RequestAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAuthorizationCompleted(this, new RequestAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/CreateExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus CreateExperiment(System.DateTime startTime, long duration, string labServerGuid, string clientGuid, string groupName, string userName) {
            object[] results = this.Invoke("CreateExperiment", new object[] {
                        startTime,
                        duration,
                        labServerGuid,
                        clientGuid,
                        groupName,
                        userName});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateExperiment(System.DateTime startTime, long duration, string labServerGuid, string clientGuid, string groupName, string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateExperiment", new object[] {
                        startTime,
                        duration,
                        labServerGuid,
                        clientGuid,
                        groupName,
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndCreateExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void CreateExperimentAsync(System.DateTime startTime, long duration, string labServerGuid, string clientGuid, string groupName, string userName) {
            this.CreateExperimentAsync(startTime, duration, labServerGuid, clientGuid, groupName, userName, null);
        }
        
        /// <remarks/>
        public void CreateExperimentAsync(System.DateTime startTime, long duration, string labServerGuid, string clientGuid, string groupName, string userName, object userState) {
            if ((this.CreateExperimentOperationCompleted == null)) {
                this.CreateExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateExperimentOperationCompleted);
            }
            this.InvokeAsync("CreateExperiment", new object[] {
                        startTime,
                        duration,
                        labServerGuid,
                        clientGuid,
                        groupName,
                        userName}, this.CreateExperimentOperationCompleted, userState);
        }
        
        private void OnCreateExperimentOperationCompleted(object arg) {
            if ((this.CreateExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateExperimentCompleted(this, new CreateExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/OpenExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus OpenExperiment(long experimentId, long duration) {
            object[] results = this.Invoke("OpenExperiment", new object[] {
                        experimentId,
                        duration});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenExperiment(long experimentId, long duration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenExperiment", new object[] {
                        experimentId,
                        duration}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndOpenExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void OpenExperimentAsync(long experimentId, long duration) {
            this.OpenExperimentAsync(experimentId, duration, null);
        }
        
        /// <remarks/>
        public void OpenExperimentAsync(long experimentId, long duration, object userState) {
            if ((this.OpenExperimentOperationCompleted == null)) {
                this.OpenExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenExperimentOperationCompleted);
            }
            this.InvokeAsync("OpenExperiment", new object[] {
                        experimentId,
                        duration}, this.OpenExperimentOperationCompleted, userState);
        }
        
        private void OnOpenExperimentOperationCompleted(object arg) {
            if ((this.OpenExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenExperimentCompleted(this, new OpenExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AgentCloseExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus AgentCloseExperiment([System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)] Coupon coupon, long experimentId) {
            object[] results = this.Invoke("AgentCloseExperiment", new object[] {
                        coupon,
                        experimentId});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAgentCloseExperiment(Coupon coupon, long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AgentCloseExperiment", new object[] {
                        coupon,
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndAgentCloseExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void AgentCloseExperimentAsync(Coupon coupon, long experimentId) {
            this.AgentCloseExperimentAsync(coupon, experimentId, null);
        }
        
        /// <remarks/>
        public void AgentCloseExperimentAsync(Coupon coupon, long experimentId, object userState) {
            if ((this.AgentCloseExperimentOperationCompleted == null)) {
                this.AgentCloseExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgentCloseExperimentOperationCompleted);
            }
            this.InvokeAsync("AgentCloseExperiment", new object[] {
                        coupon,
                        experimentId}, this.AgentCloseExperimentOperationCompleted, userState);
        }
        
        private void OnAgentCloseExperimentOperationCompleted(object arg) {
            if ((this.AgentCloseExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgentCloseExperimentCompleted(this, new AgentCloseExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ClientCloseExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageStatus ClientCloseExperiment(long experimentId) {
            object[] results = this.Invoke("ClientCloseExperiment", new object[] {
                        experimentId});
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClientCloseExperiment(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClientCloseExperiment", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageStatus EndClientCloseExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ClientCloseExperimentAsync(long experimentId) {
            this.ClientCloseExperimentAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void ClientCloseExperimentAsync(long experimentId, object userState) {
            if ((this.ClientCloseExperimentOperationCompleted == null)) {
                this.ClientCloseExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientCloseExperimentOperationCompleted);
            }
            this.InvokeAsync("ClientCloseExperiment", new object[] {
                        experimentId}, this.ClientCloseExperimentOperationCompleted, userState);
        }
        
        private void OnClientCloseExperimentOperationCompleted(object arg) {
            if ((this.ClientCloseExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientCloseExperimentCompleted(this, new ClientCloseExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveExperiment", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Experiment RetrieveExperiment(long experimentID) {
            object[] results = this.Invoke("RetrieveExperiment", new object[] {
                        experimentID});
            return ((Experiment)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveExperiment(long experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveExperiment", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public Experiment EndRetrieveExperiment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Experiment)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveExperimentAsync(long experimentID) {
            this.RetrieveExperimentAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveExperimentAsync(long experimentID, object userState) {
            if ((this.RetrieveExperimentOperationCompleted == null)) {
                this.RetrieveExperimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveExperimentOperationCompleted);
            }
            this.InvokeAsync("RetrieveExperiment", new object[] {
                        experimentID}, this.RetrieveExperimentOperationCompleted, userState);
        }
        
        private void OnRetrieveExperimentOperationCompleted(object arg) {
            if ((this.RetrieveExperimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveExperimentCompleted(this, new RetrieveExperimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveExperimentSummary", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExperimentSummary[] RetrieveExperimentSummary(Criterion[] carray) {
            object[] results = this.Invoke("RetrieveExperimentSummary", new object[] {
                        carray});
            return ((ExperimentSummary[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveExperimentSummary(Criterion[] carray, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveExperimentSummary", new object[] {
                        carray}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExperimentSummary[] EndRetrieveExperimentSummary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExperimentSummary[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveExperimentSummaryAsync(Criterion[] carray) {
            this.RetrieveExperimentSummaryAsync(carray, null);
        }
        
        /// <remarks/>
        public void RetrieveExperimentSummaryAsync(Criterion[] carray, object userState) {
            if ((this.RetrieveExperimentSummaryOperationCompleted == null)) {
                this.RetrieveExperimentSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveExperimentSummaryOperationCompleted);
            }
            this.InvokeAsync("RetrieveExperimentSummary", new object[] {
                        carray}, this.RetrieveExperimentSummaryOperationCompleted, userState);
        }
        
        private void OnRetrieveExperimentSummaryOperationCompleted(object arg) {
            if ((this.RetrieveExperimentSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveExperimentSummaryCompleted(this, new RetrieveExperimentSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveExperimentRecords", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExperimentRecord[] RetrieveExperimentRecords(long experimentID, Criterion[] carray) {
            object[] results = this.Invoke("RetrieveExperimentRecords", new object[] {
                        experimentID,
                        carray});
            return ((ExperimentRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveExperimentRecords(long experimentID, Criterion[] carray, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveExperimentRecords", new object[] {
                        experimentID,
                        carray}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExperimentRecord[] EndRetrieveExperimentRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExperimentRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveExperimentRecordsAsync(long experimentID, Criterion[] carray) {
            this.RetrieveExperimentRecordsAsync(experimentID, carray, null);
        }
        
        /// <remarks/>
        public void RetrieveExperimentRecordsAsync(long experimentID, Criterion[] carray, object userState) {
            if ((this.RetrieveExperimentRecordsOperationCompleted == null)) {
                this.RetrieveExperimentRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveExperimentRecordsOperationCompleted);
            }
            this.InvokeAsync("RetrieveExperimentRecords", new object[] {
                        experimentID,
                        carray}, this.RetrieveExperimentRecordsOperationCompleted, userState);
        }
        
        private void OnRetrieveExperimentRecordsOperationCompleted(object arg) {
            if ((this.RetrieveExperimentRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveExperimentRecordsCompleted(this, new RetrieveExperimentRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RequestExperimentAccess", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type", IsNullable=true)]
        public Coupon RequestExperimentAccess(long experimentId) {
            object[] results = this.Invoke("RequestExperimentAccess", new object[] {
                        experimentId});
            return ((Coupon)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestExperimentAccess(long experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestExperimentAccess", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Coupon EndRequestExperimentAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Coupon)(results[0]));
        }
        
        /// <remarks/>
        public void RequestExperimentAccessAsync(long experimentId) {
            this.RequestExperimentAccessAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void RequestExperimentAccessAsync(long experimentId, object userState) {
            if ((this.RequestExperimentAccessOperationCompleted == null)) {
                this.RequestExperimentAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestExperimentAccessOperationCompleted);
            }
            this.InvokeAsync("RequestExperimentAccess", new object[] {
                        experimentId}, this.RequestExperimentAccessOperationCompleted, userState);
        }
        
        private void OnRequestExperimentAccessOperationCompleted(object arg) {
            if ((this.RequestExperimentAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestExperimentAccessCompleted(this, new RequestExperimentAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/SetAnnotation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetAnnotation(int experimentId, string annotation) {
            object[] results = this.Invoke("SetAnnotation", new object[] {
                        experimentId,
                        annotation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetAnnotation(int experimentId, string annotation, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetAnnotation", new object[] {
                        experimentId,
                        annotation}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSetAnnotation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetAnnotationAsync(int experimentId, string annotation) {
            this.SetAnnotationAsync(experimentId, annotation, null);
        }
        
        /// <remarks/>
        public void SetAnnotationAsync(int experimentId, string annotation, object userState) {
            if ((this.SetAnnotationOperationCompleted == null)) {
                this.SetAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAnnotationOperationCompleted);
            }
            this.InvokeAsync("SetAnnotation", new object[] {
                        experimentId,
                        annotation}, this.SetAnnotationOperationCompleted, userState);
        }
        
        private void OnSetAnnotationOperationCompleted(object arg) {
            if ((this.SetAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAnnotationCompleted(this, new SetAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetAnnotation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnnotation(int experimentId) {
            object[] results = this.Invoke("GetAnnotation", new object[] {
                        experimentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAnnotation(int experimentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAnnotation", new object[] {
                        experimentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAnnotation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnnotationAsync(int experimentId) {
            this.GetAnnotationAsync(experimentId, null);
        }
        
        /// <remarks/>
        public void GetAnnotationAsync(int experimentId, object userState) {
            if ((this.GetAnnotationOperationCompleted == null)) {
                this.GetAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnnotationOperationCompleted);
            }
            this.InvokeAsync("GetAnnotation", new object[] {
                        experimentId}, this.GetAnnotationOperationCompleted, userState);
        }
        
        private void OnGetAnnotationOperationCompleted(object arg) {
            if ((this.GetAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnnotationCompleted(this, new GetAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RevokeReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RevokeReservation(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message) {
            object[] results = this.Invoke("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeReservation(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRevokeReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message) {
            this.RevokeReservationAsync(serviceBrokerGuid, userName, groupName, labServerGuid, labClientGuid, startTime, endTime, message, null);
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string serviceBrokerGuid, string userName, string groupName, string labServerGuid, string labClientGuid, System.DateTime startTime, System.DateTime endTime, string message, object userState) {
            if ((this.RevokeReservationOperationCompleted == null)) {
                this.RevokeReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeReservationOperationCompleted);
            }
            this.InvokeAsync("RevokeReservation", new object[] {
                        serviceBrokerGuid,
                        userName,
                        groupName,
                        labServerGuid,
                        labClientGuid,
                        startTime,
                        endTime,
                        message}, this.RevokeReservationOperationCompleted, userState);
        }
        
        private void OnRevokeReservationOperationCompleted(object arg) {
            if ((this.RevokeReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeReservationCompleted(this, new RevokeReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
 
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveClientDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LoadClientDataCompletedEventHandler(object sender, LoadClientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadClientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadClientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteClientDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListClientDataItemsCompletedEventHandler(object sender, ListClientDataItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListClientDataItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListClientDataItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserStatusCompletedEventHandler(object sender, GetUserStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntTag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntTag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ModifyUserCompletedEventHandler(object sender, ModifyUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntTag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntTag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LaunchLabClientCompletedEventHandler(object sender, LaunchLabClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LaunchLabClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LaunchLabClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntTag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntTag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestAuthorizationCompletedEventHandler(object sender, RequestAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Coupon Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Coupon)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateExperimentCompletedEventHandler(object sender, CreateExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void OpenExperimentCompletedEventHandler(object sender, OpenExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AgentCloseExperimentCompletedEventHandler(object sender, AgentCloseExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgentCloseExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgentCloseExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ClientCloseExperimentCompletedEventHandler(object sender, ClientCloseExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientCloseExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientCloseExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveExperimentCompletedEventHandler(object sender, RetrieveExperimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveExperimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveExperimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Experiment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Experiment)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveExperimentSummaryCompletedEventHandler(object sender, RetrieveExperimentSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveExperimentSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveExperimentSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExperimentSummary[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExperimentSummary[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveExperimentRecordsCompletedEventHandler(object sender, RetrieveExperimentRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveExperimentRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveExperimentRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExperimentRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExperimentRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestExperimentAccessCompletedEventHandler(object sender, RequestExperimentAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestExperimentAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestExperimentAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Coupon Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Coupon)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetAnnotationCompletedEventHandler(object sender, SetAnnotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAnnotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAnnotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAnnotationCompletedEventHandler(object sender, GetAnnotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnnotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnnotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeReservationCompletedEventHandler(object sender, RevokeReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokeReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevokeReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
