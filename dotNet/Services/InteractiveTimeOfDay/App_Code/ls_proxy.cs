//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

using iLabs.DataTypes.SoapHeaderTypes;
using iLabs.DataTypes.TicketingTypes;
using iLabs.DataTypes.StorageTypes;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name = "ITimeOfDay", Namespace = "http://ilab.mit.edu/iLabs/Services")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
public partial class TodInterface : System.Web.Services.Protocols.SoapHttpClientProtocol
{

    private OperationAuthHeader operationAuthHeaderValueField;

    private System.Threading.SendOrPostCallback ReturnTimeOfDayOperationCompleted;

    private System.Threading.SendOrPostCallback GetBlobIdOperationCompleted;

    private System.Threading.SendOrPostCallback GetExperimentIdOperationCompleted;

    /// <remarks/>
    //public todInterface()
    //{
    //    this.Url = "http://hawksbill.mit.edu/WsInterfaces/ITimeOfDay.asmx";
    //}

    public OperationAuthHeader OperationAuthHeaderValue
    {
        get
        {
            return this.operationAuthHeaderValueField;
        }
        set
        {
            this.operationAuthHeaderValueField = value;
        }
    }

    /// <remarks/>
    public event ReturnTimeOfDayCompletedEventHandler ReturnTimeOfDayCompleted;

    /// <remarks/>
    public event GetBlobIdCompletedEventHandler GetBlobIdCompleted;

    /// <remarks/>
    public event GetExperimentIdCompletedEventHandler GetExperimentIdCompleted;

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ReturnTimeOfDay", RequestNamespace = "http://ilab.mit.edu/iLabs/Services", ResponseNamespace = "http://ilab.mit.edu/iLabs/Services", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ReturnTimeOfDay()
    {
        object[] results = this.Invoke("ReturnTimeOfDay", new object[0]);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginReturnTimeOfDay(System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("ReturnTimeOfDay", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public string EndReturnTimeOfDay(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void ReturnTimeOfDayAsync()
    {
        this.ReturnTimeOfDayAsync(null);
    }

    /// <remarks/>
    public void ReturnTimeOfDayAsync(object userState)
    {
        if ((this.ReturnTimeOfDayOperationCompleted == null))
        {
            this.ReturnTimeOfDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnTimeOfDayOperationCompleted);
        }
        this.InvokeAsync("ReturnTimeOfDay", new object[0], this.ReturnTimeOfDayOperationCompleted, userState);
    }

    private void OnReturnTimeOfDayOperationCompleted(object arg)
    {
        if ((this.ReturnTimeOfDayCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReturnTimeOfDayCompleted(this, new ReturnTimeOfDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetBlobId", RequestNamespace = "http://ilab.mit.edu/iLabs/Services", ResponseNamespace = "http://ilab.mit.edu/iLabs/Services", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public long GetBlobId()
    {
        object[] results = this.Invoke("GetBlobId", new object[0]);
        return ((long)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetBlobId(System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetBlobId", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public long EndGetBlobId(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((long)(results[0]));
    }

    /// <remarks/>
    public void GetBlobIdAsync()
    {
        this.GetBlobIdAsync(null);
    }

    /// <remarks/>
    public void GetBlobIdAsync(object userState)
    {
        if ((this.GetBlobIdOperationCompleted == null))
        {
            this.GetBlobIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlobIdOperationCompleted);
        }
        this.InvokeAsync("GetBlobId", new object[0], this.GetBlobIdOperationCompleted, userState);
    }

    private void OnGetBlobIdOperationCompleted(object arg)
    {
        if ((this.GetBlobIdCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetBlobIdCompleted(this, new GetBlobIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/GetExperimentId", RequestNamespace = "http://ilab.mit.edu/iLabs/Services", ResponseNamespace = "http://ilab.mit.edu/iLabs/Services", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public long GetExperimentId()
    {
        object[] results = this.Invoke("GetExperimentId", new object[0]);
        return ((long)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetExperimentId(System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetExperimentId", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public long EndGetExperimentId(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((long)(results[0]));
    }

    /// <remarks/>
    public void GetExperimentIdAsync()
    {
        this.GetExperimentIdAsync(null);
    }

    /// <remarks/>
    public void GetExperimentIdAsync(object userState)
    {
        if ((this.GetExperimentIdOperationCompleted == null))
        {
            this.GetExperimentIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentIdOperationCompleted);
        }
        this.InvokeAsync("GetExperimentId", new object[0], this.GetExperimentIdOperationCompleted, userState);
    }

    private void OnGetExperimentIdOperationCompleted(object arg)
    {
        if ((this.GetExperimentIdCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetExperimentIdCompleted(this, new GetExperimentIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }
}
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void ReturnTimeOfDayCompletedEventHandler(object sender, ReturnTimeOfDayCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReturnTimeOfDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal ReturnTimeOfDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
        :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetBlobIdCompletedEventHandler(object sender, GetBlobIdCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetBlobIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetBlobIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
        :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public long Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetExperimentIdCompletedEventHandler(object sender, GetExperimentIdCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetExperimentIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetExperimentIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
        :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public long Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

