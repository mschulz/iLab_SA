/* $Id$ */

using System;
using System.Xml.Serialization;
//using System.Data;
//using System.Data.Common;
using System.Collections;
using System.Configuration;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Text.RegularExpressions;
using System.Net;
using System.Xml;
using System.Threading;

using iLabs.Core;
using iLabs.DataTypes;
using iLabs.DataTypes.StorageTypes;
using iLabs.DataTypes.TicketingTypes;
using iLabs.DataTypes.SoapHeaderTypes;
using iLabs.Ticketing;
using iLabs.UtilLib;
using iLabs.ExpStorage;
using iLabs.Web;


namespace iLabs.ExpStorage.ESS
{

    [XmlType(Namespace = "http://ilab.mit.edu/iLabs/type")]
    [WebService(Name = "ExperimentStorage", Namespace = "http://ilab.mit.edu/iLabs/Services")]
    [WebServiceBinding(Name = "IProcessAgent", Namespace = "http://ilab.mit.edu/iLabs/Services")]
    [WebServiceBinding(Name = "IESS", Namespace = "http://ilab.mit.edu/iLabs/Services")]
    public class ExperimentStorage : WS_ILabCore
    {

        /// <summary>
        /// 
        /// </summary>
        public OperationAuthHeader opHeader = new OperationAuthHeader();


        private ExperimentsAPI experimentsAPI = new ExperimentsAPI();
        private BlobsAPI blobsAPI = new BlobsAPI();
        private ProcessAgentDB dbTicketing = new ProcessAgentDB();


        ////////////////////////////////////////////////////
        ///       IESS Methods - Experiment methods      ///
        ////////////////////////////////////////////////////

    
        /// <summary>
        /// Closes an Experiment on the ESS so that no further ExperimentRecords
        ///    or BLOBs can be written to it; BLOBs that have been created for this Experiment but
        ///    have not been associated with an ExperimentRecord are deleted by this method.
        ///    The ESS may continue to process outstanding blobs that are associated with records.
        /// </summary>
        /// <param name="experimentId">The experimentID generated by the DomainSB</param>
        /// <returns>StorageStatus</returns>
        [WebMethod(Description = "Closes an Experiment on the ESS so that no further ExperimentRecords "
            + "or BLOBs can be written to it; BLOBs that have been created for this Experiment but "
            + "have not been associated with an ExperimentRecord are deleted by this method."
            + " The ESS may continue to process outstanding blobs that are associated with records.",
            EnableSession = true)]
        [SoapHeader("agentAuthHeader", Direction = SoapHeaderDirection.In)]
        [SoapDocumentMethod(Binding = "IESS")]
        public StorageStatus CloseExperiment(long experimentId)
        {
            bool experimentClosed = false;

           if (dbTicketing.AuthenticateAgentHeader(agentAuthHeader))
            {
            try
            {
                experimentClosed = experimentsAPI.CloseExperiment(experimentId, agentAuthHeader.coupon.issuerGuid);
                return experimentsAPI.GetExperimentStatus(experimentId, agentAuthHeader.coupon.issuerGuid); ;
            }
            catch
            {
                throw;
            }
           }
           else{
               return null;
           }
        }

        [WebMethod(Description = "Deletes an experiment object and all its associated ExperimentRecords "
            + "and BLOBs on the ESS", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("agentAuthHeader", Direction = SoapHeaderDirection.In)]
        public bool DeleteExperiment(long experimentId)
        {
            bool experimentDeleted = false;
            try
            {
                if (dbTicketing.AuthenticateAgentHeader(agentAuthHeader))
                {
                   
                    experimentDeleted = experimentsAPI.DeleteExperiment(experimentId, agentAuthHeader.coupon.issuerGuid);
                }
            }
            catch (Exception ex)
            {
               Logger.WriteLine("DeleteExperiment: " + ex.Message);
                throw;
            }
            return experimentDeleted;
        }

        [WebMethod(Description = "Opens an Experiment on the ESS so that ExperimentRecords "
            + "and BLOBs can be written to it. Duration specifies the amount of time ( in seconds )"
            + " before the experiment may be automaticly closed. Returns status",
            EnableSession = true)]
        [SoapHeader("agentAuthHeader", Direction = SoapHeaderDirection.In)]
        [SoapDocumentMethod(Binding = "IESS")]
        public StorageStatus OpenExperiment(long experimentId, long duration)
        {
            int status = 0;
            StorageStatus expStatus = null;

            if (dbTicketing.AuthenticateAgentHeader(agentAuthHeader))
            {
                try
                {
                    status = experimentsAPI.OpenExperiment(duration, experimentId,
                        agentAuthHeader.coupon.issuerGuid);  // , retrievedTicket.sponsorGuid
                    expStatus = experimentsAPI.GetExperimentStatus(experimentId, agentAuthHeader.coupon.issuerGuid);
                }
                catch
                {
                    throw;
                }
            }
            return expStatus ;
        }

        [WebMethod(Description = "Gets the Experiment's status", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public StorageStatus GetExperimentStatus(long experimentId)
        {
            StorageStatus status = new StorageStatus();
            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);
            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                
                    status = experimentsAPI.GetExperimentStatus(experimentId, opCoupon.issuerGuid);
                
                return status;
            }
            catch
            {
                throw;
            }
        }


        [WebMethod(Description = "Sets the Experiment's status, returns the resulting status. StatusCode should be one of a defined set, depending on the status action may be performed on the experiment.", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public StorageStatus SetExperimentStatus(long experimentId, int statusCode)
        {
            StorageStatus status = new StorageStatus();
            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = null;
                try
                {
                    retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.ADMINISTER_EXPERIMENT);
                }
                catch (TicketExpiredException expEx)
                {
                    if (statusCode < StorageStatus.CLOSED)
                        throw expEx;
                }
                catch (TicketNotFoundException nfEx)
                {
                    throw nfEx;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                if ((statusCode & StorageStatus.CLOSED) == StorageStatus.CLOSED)
                    {
                        status = experimentsAPI.GetExperimentStatus(experimentId, opCoupon.issuerGuid);
                        if((status.status & StorageStatus.CLOSED) != StorageStatus.CLOSED)
                            experimentsAPI.CloseExperiment(experimentId, opCoupon.issuerGuid, statusCode);
                        status = experimentsAPI.GetExperimentStatus(experimentId, opCoupon.issuerGuid);
                    }
                    else
                    {
                        status = experimentsAPI.SetExperimentStatus(experimentId, opCoupon.issuerGuid, statusCode);
                    }
                    
                
                return status;
            }
            catch(Exception ex)
            {
               Logger.WriteLine("SetExperimentStatuus: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns the number of minutes since the last \"write action\" "
            + "to the Experiment", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int GetIdleTime(long experimentId)
        {
            int idleTime = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                
                idleTime = experimentsAPI.GetIdleTime(experimentId, retrievedTicket.issuerGuid);

                return idleTime;
            }

            catch
            {
                throw;
            }

        }

     
        /// <summary>
        /// Add record to an existing experiment
        /// </summary>
        /// <param name="experimentId">the ServiceBroker experiment ID, this is used with the issuerGuid in the operation header to map to the ESS's internal expID</param>
        /// <param name="submitter">An optional string specifing the source of the record</param>
        /// <param name="type">An optional string specifing record type</param>
        /// <param name="xmlSearchable"></param>
        /// <param name="contents"></param>
        /// <param name="attributes"></param>
        /// <returns></returns>
        [WebMethod(Description = "Adds a new ExperimentRecord to a pre-existing Experiment object",
            EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int AddRecord(long experimentId,string submitter, string type, bool xmlSearchable,
            string contents, RecordAttribute[] attributes)
        {
            
            int seqNo = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                opHeader.coupon.passkey);
            
            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.STORE_RECORDS);
                seqNo = experimentsAPI.AddRecord(experimentId, retrievedTicket.issuerGuid, submitter, type,
                    xmlSearchable, contents, attributes);

                return seqNo;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("AddRecord: " + ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Add an array of records to an existing experiment
        /// </summary>
        /// <param name="experimentId">the ServiceBroker experiment ID, this is used with the issuerGuid in the operation header to map to the ESS's internal expID</param>
        /// <param name="submitter">An optional string specifing the source of the record</param>
        /// <param name="type">An optional string specifing record type</param>
        /// <param name="xmlSearchable"></param>
        /// <param name="contents"></param>
        /// <param name="attributes"></param>
        /// <returns></returns>
        [WebMethod(Description = "Adds an array of records to a pre-existing Experiment object",
            EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int AddRecords(long experimentId, ExperimentRecord[] records)
        {

            int seqNo = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.STORE_RECORDS);
                foreach (ExperimentRecord rec in records)
                {
                    seqNo = experimentsAPI.AddRecord(experimentId, retrievedTicket.issuerGuid, rec.submitter, rec.type,
                        rec.xmlSearchable, rec.contents, null);
                }

                return seqNo;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("AddRecord: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns the specified ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public ExperimentRecord GetRecord(long experimentId, int sequenceNum)
        {
            ExperimentRecord expRecord = new ExperimentRecord();

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                expRecord = experimentsAPI.GetRecord(experimentId, retrievedTicket.issuerGuid, sequenceNum);

                return expRecord;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("GetRecord: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns ExperimentRecords for the specified experiment that match the criterian. Note: returns all matching records, criterian are OR statements.", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public ExperimentRecord[] GetRecords(long experimentId, Criterion[] target )
        {
            ExperimentRecord[] expRecords = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                expRecords = experimentsAPI.GetRecords(experimentId, retrievedTicket.issuerGuid, target);

                return expRecords;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("GetRecord: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns record sequence numbers for the specified experiment that match the criterian. Note: returns all matching records, criterian are OR statements.", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int[] GetRecordIDs(long experimentId, Criterion[] target)
        {
            int[] expRecords = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                expRecords = experimentsAPI.GetRecordNumbers(experimentId, retrievedTicket.issuerGuid, target);

                return expRecords;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("GetRecord: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns the specified Experiment including the array of associated "
            + "ExperimentRecords", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public Experiment GetExperiment(long experimentId)
        {
            Experiment exp = new Experiment();

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

           
            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                exp = experimentsAPI.GetExperiment(experimentId, retrievedTicket.issuerGuid);

                return exp;
            }

            catch (Exception ex)
            {
               Logger.WriteLine("GetExperiment: " + ex.Message);
                throw;
            }
        }

        [WebMethod(Description = "Returns an array of ExperimentIDs from the specified set which match all criteria. Note: criteria are AND statements."
        + "ExperimentRecords", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("agentAuthHeader", Direction = SoapHeaderDirection.In)]
        public long[] GetExperimentIDs(long[] expSet,Criterion[] filter)
        {
            long[] results = null;
            if (dbTicketing.AuthenticateAgentHeader(agentAuthHeader))
            {
                try
                {
                    results = experimentsAPI.GetExperimentIDs(expSet, agentAuthHeader.coupon.issuerGuid, filter);

                }

                catch (Exception ex)
                {
                   Logger.WriteLine("GetExperimentIDs: " + ex.Message);
                    throw;
                }
            }
            return results;
        }

        [WebMethod(Description = "Adds the specified RecordAttributes to an ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int[] AddAttributes(long experimentId, int sequenceNum, RecordAttribute[] attributes)
        {
            int[] attributeIDs = new int[attributes.Length];

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.STORE_RECORDS);
                attributeIDs = experimentsAPI.AddAttributes(experimentId, retrievedTicket.issuerGuid, sequenceNum, attributes);

                return attributeIDs;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Retrieves the specified RecordAttributes of an ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public RecordAttribute[] GetRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds)
        {
            RecordAttribute[] recordAttributes = new RecordAttribute[attributeIds.Length];

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                recordAttributes = experimentsAPI.GetRecordAttributes(experimentId, retrievedTicket.issuerGuid, sequenceNum, attributeIds);

                return recordAttributes;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Retrieves the specified RecordAttributes of an ExperimentRecord",
            EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public RecordAttribute[] GetRecordAttributesByName(long experimentId, int sequenceNum, string attributeName)
        {
            RecordAttribute[] recordAttributes = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                recordAttributes = experimentsAPI.GetRecordAttributes(experimentId, retrievedTicket.issuerGuid, sequenceNum, attributeName);

                return recordAttributes;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Deletes the specified RecordAttributes of an ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public RecordAttribute[] DeleteRecordAttributes(long experimentId, int sequenceNum, int[] attributeIds)
        {
            RecordAttribute[] recordAttributes = new RecordAttribute[attributeIds.Length];

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.ADMINISTER_EXPERIMENT;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                recordAttributes = experimentsAPI.DeleteRecordAttributes(experimentId, retrievedTicket.issuerGuid, sequenceNum, attributeIds);

                return recordAttributes;
            }

            catch
            {
                throw;
            }
        }

        ////////////////////////////////////////////////////
        ///       IESS Methods - BLOB methods            ///
        ////////////////////////////////////////////////////

        [WebMethod(Description = "Lists the protocols that the ESS can use to retrieve a BLOB from a source", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public string[] GetSupportedBlobImportProtocols()
        {
            string[] protocols = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);

                protocols = blobsAPI.GetSupportedBlobImportProtocols();
                return protocols;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Lists the protocols that a process agent can use to retrieve a BLOB from "
            + "the ESS", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public string[] GetSupportedBlobExportProtocols()
        {
            string[] protocols = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                protocols = blobsAPI.GetSupportedBlobExportProtocols();

                return protocols;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Lists the checksum algorithms that a process agent can use to store a BLOB "
            + "on the ESS", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public string[] GetSupportedChecksumAlgorithms()
        {
            string[] checksumAlgorithms = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                checksumAlgorithms = blobsAPI.GetSupportedChecksumAlgorithms();

                return checksumAlgorithms;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Creates a new BLOB record on the ESS", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public long CreateBlob(long experimentId, string description, int byteCount, string checksum, string checksumAlgorithm)
        {
            long blobID = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.STORE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                blobID = blobsAPI.CreateBlob(experimentId, retrievedTicket.issuerGuid, description, byteCount, checksum, checksumAlgorithm);

                return blobID;
            }
            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Reports the Experiment that owns the BLOB", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public long GetBlobExperiment(long blobId)
        {
            long experimentID = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);

                experimentID = blobsAPI.GetBlobExperiment(blobId);
                return experimentID;
            }
            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Returns the associated record number of the BLOB, -1 if not associated.", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int GetBlobAssociation(long blobId)
        {
            int seqNo = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                seqNo = blobsAPI.GetBlobAssociation(blobId);

                return seqNo;
            }
            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Retrieves the BLOB records associated with a particular ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public Blob[] GetBlobs(long experimentId)
        {
             int status = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                Blob[] blobs = blobsAPI.GetBlobsForExperiment(experimentId, opHeader.coupon.issuerGuid);
                return blobs;
            }
            catch
            {
                throw;
            }

        }

        //Report on the download status of the BLOB record- incomplete ! need to store status code
        [WebMethod(Description = "Reports on the download status of the BLOB record", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int GetBlobStatus(long blobId)
        {
            int status = -1;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);
                status = blobsAPI.GetBlobStatus(blobId);
                return status;
            }
            catch
            {
                throw;
            }

        }

        [WebMethod(EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public bool RequestBlobStorage(long blobId, string blobUrl)
        {
            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.STORE_RECORDS);

                try
                {
                    return blobsAPI.RequestBlobStorage(blobId, blobUrl);
                }

                catch
                {
                    return false;
                }
            }
            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Cancels the download of binary data associated with a BLOB or deletes "
            + "the corrupt data of an attempted download", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public int CancelBlobStorage(long blobId)
        {
            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.STORE_RECORDS);
                blobsAPI.CancelBlobStorage(blobId);
            }
            catch
            {
                throw;
            }
            return 0;
        }

        [WebMethod(Description = "Requests a URL from which the specified BLOB data can be downloaded", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public string RequestBlobAccess(long blobId, string protocol, int duration)
        {
            StringBuilder blobURL = new StringBuilder();

         
            string ticketType = TicketTypes.RETRIEVE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opHeader.coupon, TicketTypes.RETRIEVE_RECORDS);
                blobURL.Append(blobsAPI.RequestBlobAccess(blobId, protocol, duration));

                return blobURL.ToString();
            }

            catch (Exception e)
            {
                throw e;
            }
        }

        [WebMethod(Description = "Associates the BLOB with the specified ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public bool AddBlobToRecord(long blobId, long experimentId, int sequenceNum)
        {
            bool blobAdded = false;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            string ticketType = TicketTypes.STORE_RECORDS;

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, ticketType);

                blobAdded = blobsAPI.AddBlobToRecord(blobId, experimentId, retrievedTicket.issuerGuid, sequenceNum);
                return blobAdded;
            }

            catch
            {
                throw;
            }
        }

        [WebMethod(Description = "Retrieves the BLOB records associated with a particular ExperimentRecord", EnableSession = true)]
        [SoapDocumentMethod(Binding = "IESS")]
        [SoapHeader("opHeader", Direction = SoapHeaderDirection.In)]
        public Blob[] GetBlobsForRecord(long experimentId, int sequenceNum)
        {
            Blob[] b = null;

            Coupon opCoupon = new Coupon(opHeader.coupon.issuerGuid, opHeader.coupon.couponId,
                 opHeader.coupon.passkey);

            try
            {
                Ticket retrievedTicket = dbTicketing.RetrieveAndVerify(opCoupon, TicketTypes.RETRIEVE_RECORDS);
                b = blobsAPI.GetBlobsForRecord(experimentId, retrievedTicket.issuerGuid, sequenceNum);

                return b;
            }
            catch
            {
                throw;
            }
        }


    }

}

